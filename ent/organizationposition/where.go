// Code generated by ent, DO NOT EDIT.

package organizationposition

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/yjiong/iotdor/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// PositionID applies equality check predicate on the "position_id" field. It's identical to PositionIDEQ.
func PositionID(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPositionID), v))
	})
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddress), v))
	})
}

// Floor applies equality check predicate on the "floor" field. It's identical to FloorEQ.
func Floor(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFloor), v))
	})
}

// UnitNo applies equality check predicate on the "unit_no" field. It's identical to UnitNoEQ.
func UnitNo(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnitNo), v))
	})
}

// LongitudeAndLatitude applies equality check predicate on the "longitude_and_latitude" field. It's identical to LongitudeAndLatitudeEQ.
func LongitudeAndLatitude(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLongitudeAndLatitude), v))
	})
}

// Summary applies equality check predicate on the "summary" field. It's identical to SummaryEQ.
func Summary(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSummary), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.OrganizationPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.OrganizationPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.OrganizationPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.OrganizationPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// PositionIDEQ applies the EQ predicate on the "position_id" field.
func PositionIDEQ(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPositionID), v))
	})
}

// PositionIDNEQ applies the NEQ predicate on the "position_id" field.
func PositionIDNEQ(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPositionID), v))
	})
}

// PositionIDIn applies the In predicate on the "position_id" field.
func PositionIDIn(vs ...string) predicate.OrganizationPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPositionID), v...))
	})
}

// PositionIDNotIn applies the NotIn predicate on the "position_id" field.
func PositionIDNotIn(vs ...string) predicate.OrganizationPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPositionID), v...))
	})
}

// PositionIDGT applies the GT predicate on the "position_id" field.
func PositionIDGT(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPositionID), v))
	})
}

// PositionIDGTE applies the GTE predicate on the "position_id" field.
func PositionIDGTE(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPositionID), v))
	})
}

// PositionIDLT applies the LT predicate on the "position_id" field.
func PositionIDLT(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPositionID), v))
	})
}

// PositionIDLTE applies the LTE predicate on the "position_id" field.
func PositionIDLTE(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPositionID), v))
	})
}

// PositionIDContains applies the Contains predicate on the "position_id" field.
func PositionIDContains(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPositionID), v))
	})
}

// PositionIDHasPrefix applies the HasPrefix predicate on the "position_id" field.
func PositionIDHasPrefix(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPositionID), v))
	})
}

// PositionIDHasSuffix applies the HasSuffix predicate on the "position_id" field.
func PositionIDHasSuffix(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPositionID), v))
	})
}

// PositionIDEqualFold applies the EqualFold predicate on the "position_id" field.
func PositionIDEqualFold(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPositionID), v))
	})
}

// PositionIDContainsFold applies the ContainsFold predicate on the "position_id" field.
func PositionIDContainsFold(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPositionID), v))
	})
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddress), v))
	})
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAddress), v))
	})
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.OrganizationPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAddress), v...))
	})
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.OrganizationPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAddress), v...))
	})
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAddress), v))
	})
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAddress), v))
	})
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAddress), v))
	})
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAddress), v))
	})
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAddress), v))
	})
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAddress), v))
	})
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAddress), v))
	})
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAddress), v))
	})
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAddress), v))
	})
}

// FloorEQ applies the EQ predicate on the "floor" field.
func FloorEQ(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFloor), v))
	})
}

// FloorNEQ applies the NEQ predicate on the "floor" field.
func FloorNEQ(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFloor), v))
	})
}

// FloorIn applies the In predicate on the "floor" field.
func FloorIn(vs ...string) predicate.OrganizationPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFloor), v...))
	})
}

// FloorNotIn applies the NotIn predicate on the "floor" field.
func FloorNotIn(vs ...string) predicate.OrganizationPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFloor), v...))
	})
}

// FloorGT applies the GT predicate on the "floor" field.
func FloorGT(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFloor), v))
	})
}

// FloorGTE applies the GTE predicate on the "floor" field.
func FloorGTE(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFloor), v))
	})
}

// FloorLT applies the LT predicate on the "floor" field.
func FloorLT(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFloor), v))
	})
}

// FloorLTE applies the LTE predicate on the "floor" field.
func FloorLTE(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFloor), v))
	})
}

// FloorContains applies the Contains predicate on the "floor" field.
func FloorContains(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFloor), v))
	})
}

// FloorHasPrefix applies the HasPrefix predicate on the "floor" field.
func FloorHasPrefix(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFloor), v))
	})
}

// FloorHasSuffix applies the HasSuffix predicate on the "floor" field.
func FloorHasSuffix(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFloor), v))
	})
}

// FloorIsNil applies the IsNil predicate on the "floor" field.
func FloorIsNil() predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFloor)))
	})
}

// FloorNotNil applies the NotNil predicate on the "floor" field.
func FloorNotNil() predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFloor)))
	})
}

// FloorEqualFold applies the EqualFold predicate on the "floor" field.
func FloorEqualFold(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFloor), v))
	})
}

// FloorContainsFold applies the ContainsFold predicate on the "floor" field.
func FloorContainsFold(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFloor), v))
	})
}

// UnitNoEQ applies the EQ predicate on the "unit_no" field.
func UnitNoEQ(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnitNo), v))
	})
}

// UnitNoNEQ applies the NEQ predicate on the "unit_no" field.
func UnitNoNEQ(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUnitNo), v))
	})
}

// UnitNoIn applies the In predicate on the "unit_no" field.
func UnitNoIn(vs ...string) predicate.OrganizationPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUnitNo), v...))
	})
}

// UnitNoNotIn applies the NotIn predicate on the "unit_no" field.
func UnitNoNotIn(vs ...string) predicate.OrganizationPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUnitNo), v...))
	})
}

// UnitNoGT applies the GT predicate on the "unit_no" field.
func UnitNoGT(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUnitNo), v))
	})
}

// UnitNoGTE applies the GTE predicate on the "unit_no" field.
func UnitNoGTE(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUnitNo), v))
	})
}

// UnitNoLT applies the LT predicate on the "unit_no" field.
func UnitNoLT(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUnitNo), v))
	})
}

// UnitNoLTE applies the LTE predicate on the "unit_no" field.
func UnitNoLTE(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUnitNo), v))
	})
}

// UnitNoContains applies the Contains predicate on the "unit_no" field.
func UnitNoContains(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUnitNo), v))
	})
}

// UnitNoHasPrefix applies the HasPrefix predicate on the "unit_no" field.
func UnitNoHasPrefix(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUnitNo), v))
	})
}

// UnitNoHasSuffix applies the HasSuffix predicate on the "unit_no" field.
func UnitNoHasSuffix(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUnitNo), v))
	})
}

// UnitNoIsNil applies the IsNil predicate on the "unit_no" field.
func UnitNoIsNil() predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUnitNo)))
	})
}

// UnitNoNotNil applies the NotNil predicate on the "unit_no" field.
func UnitNoNotNil() predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUnitNo)))
	})
}

// UnitNoEqualFold applies the EqualFold predicate on the "unit_no" field.
func UnitNoEqualFold(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUnitNo), v))
	})
}

// UnitNoContainsFold applies the ContainsFold predicate on the "unit_no" field.
func UnitNoContainsFold(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUnitNo), v))
	})
}

// LongitudeAndLatitudeEQ applies the EQ predicate on the "longitude_and_latitude" field.
func LongitudeAndLatitudeEQ(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLongitudeAndLatitude), v))
	})
}

// LongitudeAndLatitudeNEQ applies the NEQ predicate on the "longitude_and_latitude" field.
func LongitudeAndLatitudeNEQ(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLongitudeAndLatitude), v))
	})
}

// LongitudeAndLatitudeIn applies the In predicate on the "longitude_and_latitude" field.
func LongitudeAndLatitudeIn(vs ...string) predicate.OrganizationPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLongitudeAndLatitude), v...))
	})
}

// LongitudeAndLatitudeNotIn applies the NotIn predicate on the "longitude_and_latitude" field.
func LongitudeAndLatitudeNotIn(vs ...string) predicate.OrganizationPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLongitudeAndLatitude), v...))
	})
}

// LongitudeAndLatitudeGT applies the GT predicate on the "longitude_and_latitude" field.
func LongitudeAndLatitudeGT(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLongitudeAndLatitude), v))
	})
}

// LongitudeAndLatitudeGTE applies the GTE predicate on the "longitude_and_latitude" field.
func LongitudeAndLatitudeGTE(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLongitudeAndLatitude), v))
	})
}

// LongitudeAndLatitudeLT applies the LT predicate on the "longitude_and_latitude" field.
func LongitudeAndLatitudeLT(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLongitudeAndLatitude), v))
	})
}

// LongitudeAndLatitudeLTE applies the LTE predicate on the "longitude_and_latitude" field.
func LongitudeAndLatitudeLTE(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLongitudeAndLatitude), v))
	})
}

// LongitudeAndLatitudeContains applies the Contains predicate on the "longitude_and_latitude" field.
func LongitudeAndLatitudeContains(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLongitudeAndLatitude), v))
	})
}

// LongitudeAndLatitudeHasPrefix applies the HasPrefix predicate on the "longitude_and_latitude" field.
func LongitudeAndLatitudeHasPrefix(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLongitudeAndLatitude), v))
	})
}

// LongitudeAndLatitudeHasSuffix applies the HasSuffix predicate on the "longitude_and_latitude" field.
func LongitudeAndLatitudeHasSuffix(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLongitudeAndLatitude), v))
	})
}

// LongitudeAndLatitudeEqualFold applies the EqualFold predicate on the "longitude_and_latitude" field.
func LongitudeAndLatitudeEqualFold(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLongitudeAndLatitude), v))
	})
}

// LongitudeAndLatitudeContainsFold applies the ContainsFold predicate on the "longitude_and_latitude" field.
func LongitudeAndLatitudeContainsFold(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLongitudeAndLatitude), v))
	})
}

// SummaryEQ applies the EQ predicate on the "summary" field.
func SummaryEQ(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSummary), v))
	})
}

// SummaryNEQ applies the NEQ predicate on the "summary" field.
func SummaryNEQ(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSummary), v))
	})
}

// SummaryIn applies the In predicate on the "summary" field.
func SummaryIn(vs ...string) predicate.OrganizationPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSummary), v...))
	})
}

// SummaryNotIn applies the NotIn predicate on the "summary" field.
func SummaryNotIn(vs ...string) predicate.OrganizationPosition {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSummary), v...))
	})
}

// SummaryGT applies the GT predicate on the "summary" field.
func SummaryGT(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSummary), v))
	})
}

// SummaryGTE applies the GTE predicate on the "summary" field.
func SummaryGTE(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSummary), v))
	})
}

// SummaryLT applies the LT predicate on the "summary" field.
func SummaryLT(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSummary), v))
	})
}

// SummaryLTE applies the LTE predicate on the "summary" field.
func SummaryLTE(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSummary), v))
	})
}

// SummaryContains applies the Contains predicate on the "summary" field.
func SummaryContains(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSummary), v))
	})
}

// SummaryHasPrefix applies the HasPrefix predicate on the "summary" field.
func SummaryHasPrefix(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSummary), v))
	})
}

// SummaryHasSuffix applies the HasSuffix predicate on the "summary" field.
func SummaryHasSuffix(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSummary), v))
	})
}

// SummaryIsNil applies the IsNil predicate on the "summary" field.
func SummaryIsNil() predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSummary)))
	})
}

// SummaryNotNil applies the NotNil predicate on the "summary" field.
func SummaryNotNil() predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSummary)))
	})
}

// SummaryEqualFold applies the EqualFold predicate on the "summary" field.
func SummaryEqualFold(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSummary), v))
	})
}

// SummaryContainsFold applies the ContainsFold predicate on the "summary" field.
func SummaryContainsFold(v string) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSummary), v))
	})
}

// HasDevices applies the HasEdge predicate on the "devices" edge.
func HasDevices() predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DevicesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DevicesTable, DevicesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDevicesWith applies the HasEdge predicate on the "devices" edge with a given conditions (other predicates).
func HasDevicesWith(preds ...predicate.Device) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DevicesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DevicesTable, DevicesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPersonCharges applies the HasEdge predicate on the "person_charges" edge.
func HasPersonCharges() predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PersonChargesTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, PersonChargesTable, PersonChargesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPersonChargesWith applies the HasEdge predicate on the "person_charges" edge with a given conditions (other predicates).
func HasPersonChargesWith(preds ...predicate.User) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PersonChargesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, PersonChargesTable, PersonChargesPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrganizationTree applies the HasEdge predicate on the "organization_tree" edge.
func HasOrganizationTree() predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrganizationTreeTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, OrganizationTreeTable, OrganizationTreeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrganizationTreeWith applies the HasEdge predicate on the "organization_tree" edge with a given conditions (other predicates).
func HasOrganizationTreeWith(preds ...predicate.OrganizationTree) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrganizationTreeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, OrganizationTreeTable, OrganizationTreeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OrganizationPosition) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OrganizationPosition) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OrganizationPosition) predicate.OrganizationPosition {
	return predicate.OrganizationPosition(func(s *sql.Selector) {
		p(s.Not())
	})
}
