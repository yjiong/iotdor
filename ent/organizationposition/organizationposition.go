// Code generated by ent, DO NOT EDIT.

package organizationposition

import (
	"time"
)

const (
	// Label holds the string label denoting the organizationposition type in the database.
	Label = "organization_position"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldPositionID holds the string denoting the position_id field in the database.
	FieldPositionID = "position_id"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldFloor holds the string denoting the floor field in the database.
	FieldFloor = "floor"
	// FieldUnitNo holds the string denoting the unit_no field in the database.
	FieldUnitNo = "unit_no"
	// FieldLongitudeAndLatitude holds the string denoting the longitude_and_latitude field in the database.
	FieldLongitudeAndLatitude = "longitude_and_latitude"
	// FieldSummary holds the string denoting the summary field in the database.
	FieldSummary = "summary"
	// EdgeDevices holds the string denoting the devices edge name in mutations.
	EdgeDevices = "devices"
	// EdgePersonCharges holds the string denoting the person_charges edge name in mutations.
	EdgePersonCharges = "person_charges"
	// EdgeOrganizationTree holds the string denoting the organization_tree edge name in mutations.
	EdgeOrganizationTree = "organization_tree"
	// Table holds the table name of the organizationposition in the database.
	Table = "organization_positions"
	// DevicesTable is the table that holds the devices relation/edge.
	DevicesTable = "devices"
	// DevicesInverseTable is the table name for the Device entity.
	// It exists in this package in order to avoid circular dependency with the "device" package.
	DevicesInverseTable = "devices"
	// DevicesColumn is the table column denoting the devices relation/edge.
	DevicesColumn = "organization_position_devices"
	// PersonChargesTable is the table that holds the person_charges relation/edge. The primary key declared below.
	PersonChargesTable = "organization_position_person_charges"
	// PersonChargesInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	PersonChargesInverseTable = "users"
	// OrganizationTreeTable is the table that holds the organization_tree relation/edge.
	OrganizationTreeTable = "organization_trees"
	// OrganizationTreeInverseTable is the table name for the OrganizationTree entity.
	// It exists in this package in order to avoid circular dependency with the "organizationtree" package.
	OrganizationTreeInverseTable = "organization_trees"
	// OrganizationTreeColumn is the table column denoting the organization_tree relation/edge.
	OrganizationTreeColumn = "organization_tree_organization_positions"
)

// Columns holds all SQL columns for organizationposition fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldPositionID,
	FieldAddress,
	FieldFloor,
	FieldUnitNo,
	FieldLongitudeAndLatitude,
	FieldSummary,
}

var (
	// PersonChargesPrimaryKey and PersonChargesColumn2 are the table columns denoting the
	// primary key for the person_charges relation (M2M).
	PersonChargesPrimaryKey = []string{"organization_position_id", "user_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
)
