// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/yjiong/iotdor/ent/organizationtree"
)

// OrganizationTree is the model entity for the OrganizationTree schema.
type OrganizationTree struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// ParentID holds the value of the "parent_id" field.
	ParentID int `json:"parent_id,omitempty"`
	// Left holds the value of the "left" field.
	Left int `json:"left,omitempty"`
	// Right holds the value of the "right" field.
	Right int `json:"right,omitempty"`
	// Level holds the value of the "level" field.
	Level int `json:"level,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrganizationTreeQuery when eager-loading is set.
	Edges OrganizationTreeEdges `json:"edges"`
}

// OrganizationTreeEdges holds the relations/edges for other nodes in the graph.
type OrganizationTreeEdges struct {
	// OrganizationPositions holds the value of the organization_positions edge.
	OrganizationPositions []*OrganizationPosition `json:"organization_positions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OrganizationPositionsOrErr returns the OrganizationPositions value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationTreeEdges) OrganizationPositionsOrErr() ([]*OrganizationPosition, error) {
	if e.loadedTypes[0] {
		return e.OrganizationPositions, nil
	}
	return nil, &NotLoadedError{edge: "organization_positions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrganizationTree) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case organizationtree.FieldID, organizationtree.FieldParentID, organizationtree.FieldLeft, organizationtree.FieldRight, organizationtree.FieldLevel:
			values[i] = new(sql.NullInt64)
		case organizationtree.FieldName:
			values[i] = new(sql.NullString)
		case organizationtree.FieldCreateTime, organizationtree.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type OrganizationTree", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrganizationTree fields.
func (ot *OrganizationTree) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case organizationtree.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ot.ID = int(value.Int64)
		case organizationtree.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				ot.CreateTime = value.Time
			}
		case organizationtree.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				ot.UpdateTime = value.Time
			}
		case organizationtree.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ot.Name = value.String
			}
		case organizationtree.FieldParentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field parent_id", values[i])
			} else if value.Valid {
				ot.ParentID = int(value.Int64)
			}
		case organizationtree.FieldLeft:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field left", values[i])
			} else if value.Valid {
				ot.Left = int(value.Int64)
			}
		case organizationtree.FieldRight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field right", values[i])
			} else if value.Valid {
				ot.Right = int(value.Int64)
			}
		case organizationtree.FieldLevel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field level", values[i])
			} else if value.Valid {
				ot.Level = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryOrganizationPositions queries the "organization_positions" edge of the OrganizationTree entity.
func (ot *OrganizationTree) QueryOrganizationPositions() *OrganizationPositionQuery {
	return (&OrganizationTreeClient{config: ot.config}).QueryOrganizationPositions(ot)
}

// Update returns a builder for updating this OrganizationTree.
// Note that you need to call OrganizationTree.Unwrap() before calling this method if this OrganizationTree
// was returned from a transaction, and the transaction was committed or rolled back.
func (ot *OrganizationTree) Update() *OrganizationTreeUpdateOne {
	return (&OrganizationTreeClient{config: ot.config}).UpdateOne(ot)
}

// Unwrap unwraps the OrganizationTree entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ot *OrganizationTree) Unwrap() *OrganizationTree {
	_tx, ok := ot.config.driver.(*txDriver)
	if !ok {
		panic("ent: OrganizationTree is not a transactional entity")
	}
	ot.config.driver = _tx.drv
	return ot
}

// String implements the fmt.Stringer.
func (ot *OrganizationTree) String() string {
	var builder strings.Builder
	builder.WriteString("OrganizationTree(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ot.ID))
	builder.WriteString("create_time=")
	builder.WriteString(ot.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(ot.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ot.Name)
	builder.WriteString(", ")
	builder.WriteString("parent_id=")
	builder.WriteString(fmt.Sprintf("%v", ot.ParentID))
	builder.WriteString(", ")
	builder.WriteString("left=")
	builder.WriteString(fmt.Sprintf("%v", ot.Left))
	builder.WriteString(", ")
	builder.WriteString("right=")
	builder.WriteString(fmt.Sprintf("%v", ot.Right))
	builder.WriteString(", ")
	builder.WriteString("level=")
	builder.WriteString(fmt.Sprintf("%v", ot.Level))
	builder.WriteByte(')')
	return builder.String()
}

// OrganizationTrees is a parsable slice of OrganizationTree.
type OrganizationTrees []*OrganizationTree

func (ot OrganizationTrees) config(cfg config) {
	for _i := range ot {
		ot[_i].config = cfg
	}
}
