// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yjiong/iotdor/ent/organizationposition"
	"github.com/yjiong/iotdor/ent/organizationtree"
	"github.com/yjiong/iotdor/ent/predicate"
)

// OrganizationTreeQuery is the builder for querying OrganizationTree entities.
type OrganizationTreeQuery struct {
	config
	limit                     *int
	offset                    *int
	unique                    *bool
	order                     []OrderFunc
	fields                    []string
	predicates                []predicate.OrganizationTree
	withOrganizationPositions *OrganizationPositionQuery
	withFKs                   bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the OrganizationTreeQuery builder.
func (otq *OrganizationTreeQuery) Where(ps ...predicate.OrganizationTree) *OrganizationTreeQuery {
	otq.predicates = append(otq.predicates, ps...)
	return otq
}

// Limit adds a limit step to the query.
func (otq *OrganizationTreeQuery) Limit(limit int) *OrganizationTreeQuery {
	otq.limit = &limit
	return otq
}

// Offset adds an offset step to the query.
func (otq *OrganizationTreeQuery) Offset(offset int) *OrganizationTreeQuery {
	otq.offset = &offset
	return otq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (otq *OrganizationTreeQuery) Unique(unique bool) *OrganizationTreeQuery {
	otq.unique = &unique
	return otq
}

// Order adds an order step to the query.
func (otq *OrganizationTreeQuery) Order(o ...OrderFunc) *OrganizationTreeQuery {
	otq.order = append(otq.order, o...)
	return otq
}

// QueryOrganizationPositions chains the current query on the "organization_positions" edge.
func (otq *OrganizationTreeQuery) QueryOrganizationPositions() *OrganizationPositionQuery {
	query := &OrganizationPositionQuery{config: otq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := otq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := otq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organizationtree.Table, organizationtree.FieldID, selector),
			sqlgraph.To(organizationposition.Table, organizationposition.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, organizationtree.OrganizationPositionsTable, organizationtree.OrganizationPositionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(otq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first OrganizationTree entity from the query.
// Returns a *NotFoundError when no OrganizationTree was found.
func (otq *OrganizationTreeQuery) First(ctx context.Context) (*OrganizationTree, error) {
	nodes, err := otq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{organizationtree.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (otq *OrganizationTreeQuery) FirstX(ctx context.Context) *OrganizationTree {
	node, err := otq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first OrganizationTree ID from the query.
// Returns a *NotFoundError when no OrganizationTree ID was found.
func (otq *OrganizationTreeQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = otq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{organizationtree.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (otq *OrganizationTreeQuery) FirstIDX(ctx context.Context) int {
	id, err := otq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single OrganizationTree entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one OrganizationTree entity is found.
// Returns a *NotFoundError when no OrganizationTree entities are found.
func (otq *OrganizationTreeQuery) Only(ctx context.Context) (*OrganizationTree, error) {
	nodes, err := otq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{organizationtree.Label}
	default:
		return nil, &NotSingularError{organizationtree.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (otq *OrganizationTreeQuery) OnlyX(ctx context.Context) *OrganizationTree {
	node, err := otq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only OrganizationTree ID in the query.
// Returns a *NotSingularError when more than one OrganizationTree ID is found.
// Returns a *NotFoundError when no entities are found.
func (otq *OrganizationTreeQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = otq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{organizationtree.Label}
	default:
		err = &NotSingularError{organizationtree.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (otq *OrganizationTreeQuery) OnlyIDX(ctx context.Context) int {
	id, err := otq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of OrganizationTrees.
func (otq *OrganizationTreeQuery) All(ctx context.Context) ([]*OrganizationTree, error) {
	if err := otq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return otq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (otq *OrganizationTreeQuery) AllX(ctx context.Context) []*OrganizationTree {
	nodes, err := otq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of OrganizationTree IDs.
func (otq *OrganizationTreeQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := otq.Select(organizationtree.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (otq *OrganizationTreeQuery) IDsX(ctx context.Context) []int {
	ids, err := otq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (otq *OrganizationTreeQuery) Count(ctx context.Context) (int, error) {
	if err := otq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return otq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (otq *OrganizationTreeQuery) CountX(ctx context.Context) int {
	count, err := otq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (otq *OrganizationTreeQuery) Exist(ctx context.Context) (bool, error) {
	if err := otq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return otq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (otq *OrganizationTreeQuery) ExistX(ctx context.Context) bool {
	exist, err := otq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the OrganizationTreeQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (otq *OrganizationTreeQuery) Clone() *OrganizationTreeQuery {
	if otq == nil {
		return nil
	}
	return &OrganizationTreeQuery{
		config:                    otq.config,
		limit:                     otq.limit,
		offset:                    otq.offset,
		order:                     append([]OrderFunc{}, otq.order...),
		predicates:                append([]predicate.OrganizationTree{}, otq.predicates...),
		withOrganizationPositions: otq.withOrganizationPositions.Clone(),
		// clone intermediate query.
		sql:    otq.sql.Clone(),
		path:   otq.path,
		unique: otq.unique,
	}
}

// WithOrganizationPositions tells the query-builder to eager-load the nodes that are connected to
// the "organization_positions" edge. The optional arguments are used to configure the query builder of the edge.
func (otq *OrganizationTreeQuery) WithOrganizationPositions(opts ...func(*OrganizationPositionQuery)) *OrganizationTreeQuery {
	query := &OrganizationPositionQuery{config: otq.config}
	for _, opt := range opts {
		opt(query)
	}
	otq.withOrganizationPositions = query
	return otq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.OrganizationTree.Query().
//		GroupBy(organizationtree.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (otq *OrganizationTreeQuery) GroupBy(field string, fields ...string) *OrganizationTreeGroupBy {
	grbuild := &OrganizationTreeGroupBy{config: otq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := otq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return otq.sqlQuery(ctx), nil
	}
	grbuild.label = organizationtree.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.OrganizationTree.Query().
//		Select(organizationtree.FieldCreateTime).
//		Scan(ctx, &v)
//
func (otq *OrganizationTreeQuery) Select(fields ...string) *OrganizationTreeSelect {
	otq.fields = append(otq.fields, fields...)
	selbuild := &OrganizationTreeSelect{OrganizationTreeQuery: otq}
	selbuild.label = organizationtree.Label
	selbuild.flds, selbuild.scan = &otq.fields, selbuild.Scan
	return selbuild
}

func (otq *OrganizationTreeQuery) prepareQuery(ctx context.Context) error {
	for _, f := range otq.fields {
		if !organizationtree.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if otq.path != nil {
		prev, err := otq.path(ctx)
		if err != nil {
			return err
		}
		otq.sql = prev
	}
	return nil
}

func (otq *OrganizationTreeQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*OrganizationTree, error) {
	var (
		nodes       = []*OrganizationTree{}
		withFKs     = otq.withFKs
		_spec       = otq.querySpec()
		loadedTypes = [1]bool{
			otq.withOrganizationPositions != nil,
		}
	)
	if otq.withOrganizationPositions != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, organizationtree.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		return (*OrganizationTree).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		node := &OrganizationTree{config: otq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, otq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := otq.withOrganizationPositions; query != nil {
		if err := otq.loadOrganizationPositions(ctx, query, nodes, nil,
			func(n *OrganizationTree, e *OrganizationPosition) { n.Edges.OrganizationPositions = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (otq *OrganizationTreeQuery) loadOrganizationPositions(ctx context.Context, query *OrganizationPositionQuery, nodes []*OrganizationTree, init func(*OrganizationTree), assign func(*OrganizationTree, *OrganizationPosition)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*OrganizationTree)
	for i := range nodes {
		if nodes[i].organization_tree_organization_positions == nil {
			continue
		}
		fk := *nodes[i].organization_tree_organization_positions
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(organizationposition.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "organization_tree_organization_positions" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (otq *OrganizationTreeQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := otq.querySpec()
	_spec.Node.Columns = otq.fields
	if len(otq.fields) > 0 {
		_spec.Unique = otq.unique != nil && *otq.unique
	}
	return sqlgraph.CountNodes(ctx, otq.driver, _spec)
}

func (otq *OrganizationTreeQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := otq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (otq *OrganizationTreeQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   organizationtree.Table,
			Columns: organizationtree.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: organizationtree.FieldID,
			},
		},
		From:   otq.sql,
		Unique: true,
	}
	if unique := otq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := otq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, organizationtree.FieldID)
		for i := range fields {
			if fields[i] != organizationtree.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := otq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := otq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := otq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := otq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (otq *OrganizationTreeQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(otq.driver.Dialect())
	t1 := builder.Table(organizationtree.Table)
	columns := otq.fields
	if len(columns) == 0 {
		columns = organizationtree.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if otq.sql != nil {
		selector = otq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if otq.unique != nil && *otq.unique {
		selector.Distinct()
	}
	for _, p := range otq.predicates {
		p(selector)
	}
	for _, p := range otq.order {
		p(selector)
	}
	if offset := otq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := otq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// OrganizationTreeGroupBy is the group-by builder for OrganizationTree entities.
type OrganizationTreeGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (otgb *OrganizationTreeGroupBy) Aggregate(fns ...AggregateFunc) *OrganizationTreeGroupBy {
	otgb.fns = append(otgb.fns, fns...)
	return otgb
}

// Scan applies the group-by query and scans the result into the given value.
func (otgb *OrganizationTreeGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := otgb.path(ctx)
	if err != nil {
		return err
	}
	otgb.sql = query
	return otgb.sqlScan(ctx, v)
}

func (otgb *OrganizationTreeGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range otgb.fields {
		if !organizationtree.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := otgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := otgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (otgb *OrganizationTreeGroupBy) sqlQuery() *sql.Selector {
	selector := otgb.sql.Select()
	aggregation := make([]string, 0, len(otgb.fns))
	for _, fn := range otgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(otgb.fields)+len(otgb.fns))
		for _, f := range otgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(otgb.fields...)...)
}

// OrganizationTreeSelect is the builder for selecting fields of OrganizationTree entities.
type OrganizationTreeSelect struct {
	*OrganizationTreeQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (ots *OrganizationTreeSelect) Scan(ctx context.Context, v interface{}) error {
	if err := ots.prepareQuery(ctx); err != nil {
		return err
	}
	ots.sql = ots.OrganizationTreeQuery.sqlQuery(ctx)
	return ots.sqlScan(ctx, v)
}

func (ots *OrganizationTreeSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := ots.sql.Query()
	if err := ots.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
