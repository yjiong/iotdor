// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"dcmbroker/ent/device"
	"dcmbroker/ent/gateway"
	"dcmbroker/ent/group"
	"dcmbroker/ent/predicate"
	"dcmbroker/ent/user"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeDevice  = "Device"
	TypeGateway = "Gateway"
	TypeGroup   = "Group"
	TypeUser    = "User"
)

// DeviceMutation represents an operation that mutates the Device nodes in the graph.
type DeviceMutation struct {
	config
	op             Op
	typ            string
	id             *int
	create_time    *time.Time
	update_time    *time.Time
	devID          *string
	devType        *string
	devAddr        *string
	conn           *string
	name           *string
	idDelete       *bool
	clearedFields  map[string]struct{}
	gateway        *int
	clearedgateway bool
	done           bool
	oldValue       func(context.Context) (*Device, error)
	predicates     []predicate.Device
}

var _ ent.Mutation = (*DeviceMutation)(nil)

// deviceOption allows management of the mutation configuration using functional options.
type deviceOption func(*DeviceMutation)

// newDeviceMutation creates new mutation for the Device entity.
func newDeviceMutation(c config, op Op, opts ...deviceOption) *DeviceMutation {
	m := &DeviceMutation{
		config:        c,
		op:            op,
		typ:           TypeDevice,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDeviceID sets the ID field of the mutation.
func withDeviceID(id int) deviceOption {
	return func(m *DeviceMutation) {
		var (
			err   error
			once  sync.Once
			value *Device
		)
		m.oldValue = func(ctx context.Context) (*Device, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Device.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDevice sets the old Device of the mutation.
func withDevice(node *Device) deviceOption {
	return func(m *DeviceMutation) {
		m.oldValue = func(context.Context) (*Device, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DeviceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DeviceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DeviceMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreateTime sets the "create_time" field.
func (m *DeviceMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *DeviceMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Device entity.
// If the Device object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *DeviceMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *DeviceMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *DeviceMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Device entity.
// If the Device object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *DeviceMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetDevID sets the "devID" field.
func (m *DeviceMutation) SetDevID(s string) {
	m.devID = &s
}

// DevID returns the value of the "devID" field in the mutation.
func (m *DeviceMutation) DevID() (r string, exists bool) {
	v := m.devID
	if v == nil {
		return
	}
	return *v, true
}

// OldDevID returns the old "devID" field's value of the Device entity.
// If the Device object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceMutation) OldDevID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDevID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDevID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDevID: %w", err)
	}
	return oldValue.DevID, nil
}

// ResetDevID resets all changes to the "devID" field.
func (m *DeviceMutation) ResetDevID() {
	m.devID = nil
}

// SetDevType sets the "devType" field.
func (m *DeviceMutation) SetDevType(s string) {
	m.devType = &s
}

// DevType returns the value of the "devType" field in the mutation.
func (m *DeviceMutation) DevType() (r string, exists bool) {
	v := m.devType
	if v == nil {
		return
	}
	return *v, true
}

// OldDevType returns the old "devType" field's value of the Device entity.
// If the Device object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceMutation) OldDevType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDevType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDevType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDevType: %w", err)
	}
	return oldValue.DevType, nil
}

// ResetDevType resets all changes to the "devType" field.
func (m *DeviceMutation) ResetDevType() {
	m.devType = nil
}

// SetDevAddr sets the "devAddr" field.
func (m *DeviceMutation) SetDevAddr(s string) {
	m.devAddr = &s
}

// DevAddr returns the value of the "devAddr" field in the mutation.
func (m *DeviceMutation) DevAddr() (r string, exists bool) {
	v := m.devAddr
	if v == nil {
		return
	}
	return *v, true
}

// OldDevAddr returns the old "devAddr" field's value of the Device entity.
// If the Device object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceMutation) OldDevAddr(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDevAddr is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDevAddr requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDevAddr: %w", err)
	}
	return oldValue.DevAddr, nil
}

// ResetDevAddr resets all changes to the "devAddr" field.
func (m *DeviceMutation) ResetDevAddr() {
	m.devAddr = nil
}

// SetConn sets the "conn" field.
func (m *DeviceMutation) SetConn(s string) {
	m.conn = &s
}

// Conn returns the value of the "conn" field in the mutation.
func (m *DeviceMutation) Conn() (r string, exists bool) {
	v := m.conn
	if v == nil {
		return
	}
	return *v, true
}

// OldConn returns the old "conn" field's value of the Device entity.
// If the Device object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceMutation) OldConn(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldConn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldConn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConn: %w", err)
	}
	return oldValue.Conn, nil
}

// ResetConn resets all changes to the "conn" field.
func (m *DeviceMutation) ResetConn() {
	m.conn = nil
}

// SetName sets the "name" field.
func (m *DeviceMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *DeviceMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Device entity.
// If the Device object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *DeviceMutation) ClearName() {
	m.name = nil
	m.clearedFields[device.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *DeviceMutation) NameCleared() bool {
	_, ok := m.clearedFields[device.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *DeviceMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, device.FieldName)
}

// SetIdDelete sets the "idDelete" field.
func (m *DeviceMutation) SetIdDelete(b bool) {
	m.idDelete = &b
}

// IdDelete returns the value of the "idDelete" field in the mutation.
func (m *DeviceMutation) IdDelete() (r bool, exists bool) {
	v := m.idDelete
	if v == nil {
		return
	}
	return *v, true
}

// OldIdDelete returns the old "idDelete" field's value of the Device entity.
// If the Device object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceMutation) OldIdDelete(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIdDelete is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIdDelete requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIdDelete: %w", err)
	}
	return oldValue.IdDelete, nil
}

// ResetIdDelete resets all changes to the "idDelete" field.
func (m *DeviceMutation) ResetIdDelete() {
	m.idDelete = nil
}

// SetGatewayID sets the "gateway" edge to the Gateway entity by id.
func (m *DeviceMutation) SetGatewayID(id int) {
	m.gateway = &id
}

// ClearGateway clears the "gateway" edge to the Gateway entity.
func (m *DeviceMutation) ClearGateway() {
	m.clearedgateway = true
}

// GatewayCleared reports if the "gateway" edge to the Gateway entity was cleared.
func (m *DeviceMutation) GatewayCleared() bool {
	return m.clearedgateway
}

// GatewayID returns the "gateway" edge ID in the mutation.
func (m *DeviceMutation) GatewayID() (id int, exists bool) {
	if m.gateway != nil {
		return *m.gateway, true
	}
	return
}

// GatewayIDs returns the "gateway" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// GatewayID instead. It exists only for internal usage by the builders.
func (m *DeviceMutation) GatewayIDs() (ids []int) {
	if id := m.gateway; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGateway resets all changes to the "gateway" edge.
func (m *DeviceMutation) ResetGateway() {
	m.gateway = nil
	m.clearedgateway = false
}

// Where appends a list predicates to the DeviceMutation builder.
func (m *DeviceMutation) Where(ps ...predicate.Device) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *DeviceMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Device).
func (m *DeviceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DeviceMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.create_time != nil {
		fields = append(fields, device.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, device.FieldUpdateTime)
	}
	if m.devID != nil {
		fields = append(fields, device.FieldDevID)
	}
	if m.devType != nil {
		fields = append(fields, device.FieldDevType)
	}
	if m.devAddr != nil {
		fields = append(fields, device.FieldDevAddr)
	}
	if m.conn != nil {
		fields = append(fields, device.FieldConn)
	}
	if m.name != nil {
		fields = append(fields, device.FieldName)
	}
	if m.idDelete != nil {
		fields = append(fields, device.FieldIdDelete)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DeviceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case device.FieldCreateTime:
		return m.CreateTime()
	case device.FieldUpdateTime:
		return m.UpdateTime()
	case device.FieldDevID:
		return m.DevID()
	case device.FieldDevType:
		return m.DevType()
	case device.FieldDevAddr:
		return m.DevAddr()
	case device.FieldConn:
		return m.Conn()
	case device.FieldName:
		return m.Name()
	case device.FieldIdDelete:
		return m.IdDelete()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DeviceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case device.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case device.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case device.FieldDevID:
		return m.OldDevID(ctx)
	case device.FieldDevType:
		return m.OldDevType(ctx)
	case device.FieldDevAddr:
		return m.OldDevAddr(ctx)
	case device.FieldConn:
		return m.OldConn(ctx)
	case device.FieldName:
		return m.OldName(ctx)
	case device.FieldIdDelete:
		return m.OldIdDelete(ctx)
	}
	return nil, fmt.Errorf("unknown Device field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DeviceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case device.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case device.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case device.FieldDevID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDevID(v)
		return nil
	case device.FieldDevType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDevType(v)
		return nil
	case device.FieldDevAddr:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDevAddr(v)
		return nil
	case device.FieldConn:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConn(v)
		return nil
	case device.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case device.FieldIdDelete:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIdDelete(v)
		return nil
	}
	return fmt.Errorf("unknown Device field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DeviceMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DeviceMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DeviceMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Device numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DeviceMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(device.FieldName) {
		fields = append(fields, device.FieldName)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DeviceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DeviceMutation) ClearField(name string) error {
	switch name {
	case device.FieldName:
		m.ClearName()
		return nil
	}
	return fmt.Errorf("unknown Device nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DeviceMutation) ResetField(name string) error {
	switch name {
	case device.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case device.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case device.FieldDevID:
		m.ResetDevID()
		return nil
	case device.FieldDevType:
		m.ResetDevType()
		return nil
	case device.FieldDevAddr:
		m.ResetDevAddr()
		return nil
	case device.FieldConn:
		m.ResetConn()
		return nil
	case device.FieldName:
		m.ResetName()
		return nil
	case device.FieldIdDelete:
		m.ResetIdDelete()
		return nil
	}
	return fmt.Errorf("unknown Device field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DeviceMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.gateway != nil {
		edges = append(edges, device.EdgeGateway)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DeviceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case device.EdgeGateway:
		if id := m.gateway; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DeviceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DeviceMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DeviceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedgateway {
		edges = append(edges, device.EdgeGateway)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DeviceMutation) EdgeCleared(name string) bool {
	switch name {
	case device.EdgeGateway:
		return m.clearedgateway
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DeviceMutation) ClearEdge(name string) error {
	switch name {
	case device.EdgeGateway:
		m.ClearGateway()
		return nil
	}
	return fmt.Errorf("unknown Device unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DeviceMutation) ResetEdge(name string) error {
	switch name {
	case device.EdgeGateway:
		m.ResetGateway()
		return nil
	}
	return fmt.Errorf("unknown Device edge %s", name)
}

// GatewayMutation represents an operation that mutates the Gateway nodes in the graph.
type GatewayMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	create_time          *time.Time
	update_time          *time.Time
	gwid                 *string
	broker               *string
	installationLocation *string
	online               *bool
	idDelete             *bool
	upInterval           *int
	addupInterval        *int
	clearedFields        map[string]struct{}
	devices              map[int]struct{}
	removeddevices       map[int]struct{}
	cleareddevices       bool
	belong               *int
	clearedbelong        bool
	done                 bool
	oldValue             func(context.Context) (*Gateway, error)
	predicates           []predicate.Gateway
}

var _ ent.Mutation = (*GatewayMutation)(nil)

// gatewayOption allows management of the mutation configuration using functional options.
type gatewayOption func(*GatewayMutation)

// newGatewayMutation creates new mutation for the Gateway entity.
func newGatewayMutation(c config, op Op, opts ...gatewayOption) *GatewayMutation {
	m := &GatewayMutation{
		config:        c,
		op:            op,
		typ:           TypeGateway,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGatewayID sets the ID field of the mutation.
func withGatewayID(id int) gatewayOption {
	return func(m *GatewayMutation) {
		var (
			err   error
			once  sync.Once
			value *Gateway
		)
		m.oldValue = func(ctx context.Context) (*Gateway, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Gateway.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGateway sets the old Gateway of the mutation.
func withGateway(node *Gateway) gatewayOption {
	return func(m *GatewayMutation) {
		m.oldValue = func(context.Context) (*Gateway, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GatewayMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GatewayMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GatewayMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreateTime sets the "create_time" field.
func (m *GatewayMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *GatewayMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Gateway entity.
// If the Gateway object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GatewayMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *GatewayMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *GatewayMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *GatewayMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Gateway entity.
// If the Gateway object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GatewayMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *GatewayMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetGwid sets the "gwid" field.
func (m *GatewayMutation) SetGwid(s string) {
	m.gwid = &s
}

// Gwid returns the value of the "gwid" field in the mutation.
func (m *GatewayMutation) Gwid() (r string, exists bool) {
	v := m.gwid
	if v == nil {
		return
	}
	return *v, true
}

// OldGwid returns the old "gwid" field's value of the Gateway entity.
// If the Gateway object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GatewayMutation) OldGwid(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldGwid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldGwid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGwid: %w", err)
	}
	return oldValue.Gwid, nil
}

// ResetGwid resets all changes to the "gwid" field.
func (m *GatewayMutation) ResetGwid() {
	m.gwid = nil
}

// SetBroker sets the "broker" field.
func (m *GatewayMutation) SetBroker(s string) {
	m.broker = &s
}

// Broker returns the value of the "broker" field in the mutation.
func (m *GatewayMutation) Broker() (r string, exists bool) {
	v := m.broker
	if v == nil {
		return
	}
	return *v, true
}

// OldBroker returns the old "broker" field's value of the Gateway entity.
// If the Gateway object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GatewayMutation) OldBroker(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldBroker is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldBroker requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBroker: %w", err)
	}
	return oldValue.Broker, nil
}

// ResetBroker resets all changes to the "broker" field.
func (m *GatewayMutation) ResetBroker() {
	m.broker = nil
}

// SetInstallationLocation sets the "installationLocation" field.
func (m *GatewayMutation) SetInstallationLocation(s string) {
	m.installationLocation = &s
}

// InstallationLocation returns the value of the "installationLocation" field in the mutation.
func (m *GatewayMutation) InstallationLocation() (r string, exists bool) {
	v := m.installationLocation
	if v == nil {
		return
	}
	return *v, true
}

// OldInstallationLocation returns the old "installationLocation" field's value of the Gateway entity.
// If the Gateway object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GatewayMutation) OldInstallationLocation(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldInstallationLocation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldInstallationLocation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInstallationLocation: %w", err)
	}
	return oldValue.InstallationLocation, nil
}

// ClearInstallationLocation clears the value of the "installationLocation" field.
func (m *GatewayMutation) ClearInstallationLocation() {
	m.installationLocation = nil
	m.clearedFields[gateway.FieldInstallationLocation] = struct{}{}
}

// InstallationLocationCleared returns if the "installationLocation" field was cleared in this mutation.
func (m *GatewayMutation) InstallationLocationCleared() bool {
	_, ok := m.clearedFields[gateway.FieldInstallationLocation]
	return ok
}

// ResetInstallationLocation resets all changes to the "installationLocation" field.
func (m *GatewayMutation) ResetInstallationLocation() {
	m.installationLocation = nil
	delete(m.clearedFields, gateway.FieldInstallationLocation)
}

// SetOnline sets the "online" field.
func (m *GatewayMutation) SetOnline(b bool) {
	m.online = &b
}

// Online returns the value of the "online" field in the mutation.
func (m *GatewayMutation) Online() (r bool, exists bool) {
	v := m.online
	if v == nil {
		return
	}
	return *v, true
}

// OldOnline returns the old "online" field's value of the Gateway entity.
// If the Gateway object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GatewayMutation) OldOnline(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldOnline is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldOnline requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOnline: %w", err)
	}
	return oldValue.Online, nil
}

// ResetOnline resets all changes to the "online" field.
func (m *GatewayMutation) ResetOnline() {
	m.online = nil
}

// SetIdDelete sets the "idDelete" field.
func (m *GatewayMutation) SetIdDelete(b bool) {
	m.idDelete = &b
}

// IdDelete returns the value of the "idDelete" field in the mutation.
func (m *GatewayMutation) IdDelete() (r bool, exists bool) {
	v := m.idDelete
	if v == nil {
		return
	}
	return *v, true
}

// OldIdDelete returns the old "idDelete" field's value of the Gateway entity.
// If the Gateway object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GatewayMutation) OldIdDelete(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIdDelete is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIdDelete requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIdDelete: %w", err)
	}
	return oldValue.IdDelete, nil
}

// ResetIdDelete resets all changes to the "idDelete" field.
func (m *GatewayMutation) ResetIdDelete() {
	m.idDelete = nil
}

// SetUpInterval sets the "upInterval" field.
func (m *GatewayMutation) SetUpInterval(i int) {
	m.upInterval = &i
	m.addupInterval = nil
}

// UpInterval returns the value of the "upInterval" field in the mutation.
func (m *GatewayMutation) UpInterval() (r int, exists bool) {
	v := m.upInterval
	if v == nil {
		return
	}
	return *v, true
}

// OldUpInterval returns the old "upInterval" field's value of the Gateway entity.
// If the Gateway object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GatewayMutation) OldUpInterval(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpInterval is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpInterval requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpInterval: %w", err)
	}
	return oldValue.UpInterval, nil
}

// AddUpInterval adds i to the "upInterval" field.
func (m *GatewayMutation) AddUpInterval(i int) {
	if m.addupInterval != nil {
		*m.addupInterval += i
	} else {
		m.addupInterval = &i
	}
}

// AddedUpInterval returns the value that was added to the "upInterval" field in this mutation.
func (m *GatewayMutation) AddedUpInterval() (r int, exists bool) {
	v := m.addupInterval
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpInterval resets all changes to the "upInterval" field.
func (m *GatewayMutation) ResetUpInterval() {
	m.upInterval = nil
	m.addupInterval = nil
}

// AddDeviceIDs adds the "devices" edge to the Device entity by ids.
func (m *GatewayMutation) AddDeviceIDs(ids ...int) {
	if m.devices == nil {
		m.devices = make(map[int]struct{})
	}
	for i := range ids {
		m.devices[ids[i]] = struct{}{}
	}
}

// ClearDevices clears the "devices" edge to the Device entity.
func (m *GatewayMutation) ClearDevices() {
	m.cleareddevices = true
}

// DevicesCleared reports if the "devices" edge to the Device entity was cleared.
func (m *GatewayMutation) DevicesCleared() bool {
	return m.cleareddevices
}

// RemoveDeviceIDs removes the "devices" edge to the Device entity by IDs.
func (m *GatewayMutation) RemoveDeviceIDs(ids ...int) {
	if m.removeddevices == nil {
		m.removeddevices = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.devices, ids[i])
		m.removeddevices[ids[i]] = struct{}{}
	}
}

// RemovedDevices returns the removed IDs of the "devices" edge to the Device entity.
func (m *GatewayMutation) RemovedDevicesIDs() (ids []int) {
	for id := range m.removeddevices {
		ids = append(ids, id)
	}
	return
}

// DevicesIDs returns the "devices" edge IDs in the mutation.
func (m *GatewayMutation) DevicesIDs() (ids []int) {
	for id := range m.devices {
		ids = append(ids, id)
	}
	return
}

// ResetDevices resets all changes to the "devices" edge.
func (m *GatewayMutation) ResetDevices() {
	m.devices = nil
	m.cleareddevices = false
	m.removeddevices = nil
}

// SetBelongID sets the "belong" edge to the User entity by id.
func (m *GatewayMutation) SetBelongID(id int) {
	m.belong = &id
}

// ClearBelong clears the "belong" edge to the User entity.
func (m *GatewayMutation) ClearBelong() {
	m.clearedbelong = true
}

// BelongCleared reports if the "belong" edge to the User entity was cleared.
func (m *GatewayMutation) BelongCleared() bool {
	return m.clearedbelong
}

// BelongID returns the "belong" edge ID in the mutation.
func (m *GatewayMutation) BelongID() (id int, exists bool) {
	if m.belong != nil {
		return *m.belong, true
	}
	return
}

// BelongIDs returns the "belong" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// BelongID instead. It exists only for internal usage by the builders.
func (m *GatewayMutation) BelongIDs() (ids []int) {
	if id := m.belong; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetBelong resets all changes to the "belong" edge.
func (m *GatewayMutation) ResetBelong() {
	m.belong = nil
	m.clearedbelong = false
}

// Where appends a list predicates to the GatewayMutation builder.
func (m *GatewayMutation) Where(ps ...predicate.Gateway) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *GatewayMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Gateway).
func (m *GatewayMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GatewayMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.create_time != nil {
		fields = append(fields, gateway.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, gateway.FieldUpdateTime)
	}
	if m.gwid != nil {
		fields = append(fields, gateway.FieldGwid)
	}
	if m.broker != nil {
		fields = append(fields, gateway.FieldBroker)
	}
	if m.installationLocation != nil {
		fields = append(fields, gateway.FieldInstallationLocation)
	}
	if m.online != nil {
		fields = append(fields, gateway.FieldOnline)
	}
	if m.idDelete != nil {
		fields = append(fields, gateway.FieldIdDelete)
	}
	if m.upInterval != nil {
		fields = append(fields, gateway.FieldUpInterval)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GatewayMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case gateway.FieldCreateTime:
		return m.CreateTime()
	case gateway.FieldUpdateTime:
		return m.UpdateTime()
	case gateway.FieldGwid:
		return m.Gwid()
	case gateway.FieldBroker:
		return m.Broker()
	case gateway.FieldInstallationLocation:
		return m.InstallationLocation()
	case gateway.FieldOnline:
		return m.Online()
	case gateway.FieldIdDelete:
		return m.IdDelete()
	case gateway.FieldUpInterval:
		return m.UpInterval()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GatewayMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case gateway.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case gateway.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case gateway.FieldGwid:
		return m.OldGwid(ctx)
	case gateway.FieldBroker:
		return m.OldBroker(ctx)
	case gateway.FieldInstallationLocation:
		return m.OldInstallationLocation(ctx)
	case gateway.FieldOnline:
		return m.OldOnline(ctx)
	case gateway.FieldIdDelete:
		return m.OldIdDelete(ctx)
	case gateway.FieldUpInterval:
		return m.OldUpInterval(ctx)
	}
	return nil, fmt.Errorf("unknown Gateway field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GatewayMutation) SetField(name string, value ent.Value) error {
	switch name {
	case gateway.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case gateway.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case gateway.FieldGwid:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGwid(v)
		return nil
	case gateway.FieldBroker:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBroker(v)
		return nil
	case gateway.FieldInstallationLocation:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInstallationLocation(v)
		return nil
	case gateway.FieldOnline:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOnline(v)
		return nil
	case gateway.FieldIdDelete:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIdDelete(v)
		return nil
	case gateway.FieldUpInterval:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpInterval(v)
		return nil
	}
	return fmt.Errorf("unknown Gateway field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GatewayMutation) AddedFields() []string {
	var fields []string
	if m.addupInterval != nil {
		fields = append(fields, gateway.FieldUpInterval)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GatewayMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case gateway.FieldUpInterval:
		return m.AddedUpInterval()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GatewayMutation) AddField(name string, value ent.Value) error {
	switch name {
	case gateway.FieldUpInterval:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpInterval(v)
		return nil
	}
	return fmt.Errorf("unknown Gateway numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GatewayMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(gateway.FieldInstallationLocation) {
		fields = append(fields, gateway.FieldInstallationLocation)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GatewayMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GatewayMutation) ClearField(name string) error {
	switch name {
	case gateway.FieldInstallationLocation:
		m.ClearInstallationLocation()
		return nil
	}
	return fmt.Errorf("unknown Gateway nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GatewayMutation) ResetField(name string) error {
	switch name {
	case gateway.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case gateway.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case gateway.FieldGwid:
		m.ResetGwid()
		return nil
	case gateway.FieldBroker:
		m.ResetBroker()
		return nil
	case gateway.FieldInstallationLocation:
		m.ResetInstallationLocation()
		return nil
	case gateway.FieldOnline:
		m.ResetOnline()
		return nil
	case gateway.FieldIdDelete:
		m.ResetIdDelete()
		return nil
	case gateway.FieldUpInterval:
		m.ResetUpInterval()
		return nil
	}
	return fmt.Errorf("unknown Gateway field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GatewayMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.devices != nil {
		edges = append(edges, gateway.EdgeDevices)
	}
	if m.belong != nil {
		edges = append(edges, gateway.EdgeBelong)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GatewayMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case gateway.EdgeDevices:
		ids := make([]ent.Value, 0, len(m.devices))
		for id := range m.devices {
			ids = append(ids, id)
		}
		return ids
	case gateway.EdgeBelong:
		if id := m.belong; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GatewayMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removeddevices != nil {
		edges = append(edges, gateway.EdgeDevices)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GatewayMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case gateway.EdgeDevices:
		ids := make([]ent.Value, 0, len(m.removeddevices))
		for id := range m.removeddevices {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GatewayMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareddevices {
		edges = append(edges, gateway.EdgeDevices)
	}
	if m.clearedbelong {
		edges = append(edges, gateway.EdgeBelong)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GatewayMutation) EdgeCleared(name string) bool {
	switch name {
	case gateway.EdgeDevices:
		return m.cleareddevices
	case gateway.EdgeBelong:
		return m.clearedbelong
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GatewayMutation) ClearEdge(name string) error {
	switch name {
	case gateway.EdgeBelong:
		m.ClearBelong()
		return nil
	}
	return fmt.Errorf("unknown Gateway unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GatewayMutation) ResetEdge(name string) error {
	switch name {
	case gateway.EdgeDevices:
		m.ResetDevices()
		return nil
	case gateway.EdgeBelong:
		m.ResetBelong()
		return nil
	}
	return fmt.Errorf("unknown Gateway edge %s", name)
}

// GroupMutation represents an operation that mutates the Group nodes in the graph.
type GroupMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	clearedFields map[string]struct{}
	users         map[int]struct{}
	removedusers  map[int]struct{}
	clearedusers  bool
	admin         *int
	clearedadmin  bool
	done          bool
	oldValue      func(context.Context) (*Group, error)
	predicates    []predicate.Group
}

var _ ent.Mutation = (*GroupMutation)(nil)

// groupOption allows management of the mutation configuration using functional options.
type groupOption func(*GroupMutation)

// newGroupMutation creates new mutation for the Group entity.
func newGroupMutation(c config, op Op, opts ...groupOption) *GroupMutation {
	m := &GroupMutation{
		config:        c,
		op:            op,
		typ:           TypeGroup,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGroupID sets the ID field of the mutation.
func withGroupID(id int) groupOption {
	return func(m *GroupMutation) {
		var (
			err   error
			once  sync.Once
			value *Group
		)
		m.oldValue = func(ctx context.Context) (*Group, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Group.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGroup sets the old Group of the mutation.
func withGroup(node *Group) groupOption {
	return func(m *GroupMutation) {
		m.oldValue = func(context.Context) (*Group, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GroupMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GroupMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GroupMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *GroupMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *GroupMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *GroupMutation) ResetName() {
	m.name = nil
}

// AddUserIDs adds the "users" edge to the User entity by ids.
func (m *GroupMutation) AddUserIDs(ids ...int) {
	if m.users == nil {
		m.users = make(map[int]struct{})
	}
	for i := range ids {
		m.users[ids[i]] = struct{}{}
	}
}

// ClearUsers clears the "users" edge to the User entity.
func (m *GroupMutation) ClearUsers() {
	m.clearedusers = true
}

// UsersCleared reports if the "users" edge to the User entity was cleared.
func (m *GroupMutation) UsersCleared() bool {
	return m.clearedusers
}

// RemoveUserIDs removes the "users" edge to the User entity by IDs.
func (m *GroupMutation) RemoveUserIDs(ids ...int) {
	if m.removedusers == nil {
		m.removedusers = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.users, ids[i])
		m.removedusers[ids[i]] = struct{}{}
	}
}

// RemovedUsers returns the removed IDs of the "users" edge to the User entity.
func (m *GroupMutation) RemovedUsersIDs() (ids []int) {
	for id := range m.removedusers {
		ids = append(ids, id)
	}
	return
}

// UsersIDs returns the "users" edge IDs in the mutation.
func (m *GroupMutation) UsersIDs() (ids []int) {
	for id := range m.users {
		ids = append(ids, id)
	}
	return
}

// ResetUsers resets all changes to the "users" edge.
func (m *GroupMutation) ResetUsers() {
	m.users = nil
	m.clearedusers = false
	m.removedusers = nil
}

// SetAdminID sets the "admin" edge to the User entity by id.
func (m *GroupMutation) SetAdminID(id int) {
	m.admin = &id
}

// ClearAdmin clears the "admin" edge to the User entity.
func (m *GroupMutation) ClearAdmin() {
	m.clearedadmin = true
}

// AdminCleared reports if the "admin" edge to the User entity was cleared.
func (m *GroupMutation) AdminCleared() bool {
	return m.clearedadmin
}

// AdminID returns the "admin" edge ID in the mutation.
func (m *GroupMutation) AdminID() (id int, exists bool) {
	if m.admin != nil {
		return *m.admin, true
	}
	return
}

// AdminIDs returns the "admin" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AdminID instead. It exists only for internal usage by the builders.
func (m *GroupMutation) AdminIDs() (ids []int) {
	if id := m.admin; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAdmin resets all changes to the "admin" edge.
func (m *GroupMutation) ResetAdmin() {
	m.admin = nil
	m.clearedadmin = false
}

// Where appends a list predicates to the GroupMutation builder.
func (m *GroupMutation) Where(ps ...predicate.Group) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *GroupMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Group).
func (m *GroupMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GroupMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, group.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GroupMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case group.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GroupMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case group.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Group field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupMutation) SetField(name string, value ent.Value) error {
	switch name {
	case group.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Group field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GroupMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GroupMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Group numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GroupMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GroupMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GroupMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Group nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GroupMutation) ResetField(name string) error {
	switch name {
	case group.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Group field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GroupMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.users != nil {
		edges = append(edges, group.EdgeUsers)
	}
	if m.admin != nil {
		edges = append(edges, group.EdgeAdmin)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GroupMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case group.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.users))
		for id := range m.users {
			ids = append(ids, id)
		}
		return ids
	case group.EdgeAdmin:
		if id := m.admin; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GroupMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedusers != nil {
		edges = append(edges, group.EdgeUsers)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GroupMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case group.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.removedusers))
		for id := range m.removedusers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GroupMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedusers {
		edges = append(edges, group.EdgeUsers)
	}
	if m.clearedadmin {
		edges = append(edges, group.EdgeAdmin)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GroupMutation) EdgeCleared(name string) bool {
	switch name {
	case group.EdgeUsers:
		return m.clearedusers
	case group.EdgeAdmin:
		return m.clearedadmin
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GroupMutation) ClearEdge(name string) error {
	switch name {
	case group.EdgeAdmin:
		m.ClearAdmin()
		return nil
	}
	return fmt.Errorf("unknown Group unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GroupMutation) ResetEdge(name string) error {
	switch name {
	case group.EdgeUsers:
		m.ResetUsers()
		return nil
	case group.EdgeAdmin:
		m.ResetAdmin()
		return nil
	}
	return fmt.Errorf("unknown Group edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op              Op
	typ             string
	id              *int
	create_time     *time.Time
	update_time     *time.Time
	name            *string
	passwd          *string
	clearedFields   map[string]struct{}
	gateways        map[int]struct{}
	removedgateways map[int]struct{}
	clearedgateways bool
	groups          map[int]struct{}
	removedgroups   map[int]struct{}
	clearedgroups   bool
	manage          map[int]struct{}
	removedmanage   map[int]struct{}
	clearedmanage   bool
	done            bool
	oldValue        func(context.Context) (*User, error)
	predicates      []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreateTime sets the "create_time" field.
func (m *UserMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *UserMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *UserMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *UserMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *UserMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *UserMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetPasswd sets the "passwd" field.
func (m *UserMutation) SetPasswd(s string) {
	m.passwd = &s
}

// Passwd returns the value of the "passwd" field in the mutation.
func (m *UserMutation) Passwd() (r string, exists bool) {
	v := m.passwd
	if v == nil {
		return
	}
	return *v, true
}

// OldPasswd returns the old "passwd" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPasswd(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPasswd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPasswd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPasswd: %w", err)
	}
	return oldValue.Passwd, nil
}

// ResetPasswd resets all changes to the "passwd" field.
func (m *UserMutation) ResetPasswd() {
	m.passwd = nil
}

// AddGatewayIDs adds the "gateways" edge to the Gateway entity by ids.
func (m *UserMutation) AddGatewayIDs(ids ...int) {
	if m.gateways == nil {
		m.gateways = make(map[int]struct{})
	}
	for i := range ids {
		m.gateways[ids[i]] = struct{}{}
	}
}

// ClearGateways clears the "gateways" edge to the Gateway entity.
func (m *UserMutation) ClearGateways() {
	m.clearedgateways = true
}

// GatewaysCleared reports if the "gateways" edge to the Gateway entity was cleared.
func (m *UserMutation) GatewaysCleared() bool {
	return m.clearedgateways
}

// RemoveGatewayIDs removes the "gateways" edge to the Gateway entity by IDs.
func (m *UserMutation) RemoveGatewayIDs(ids ...int) {
	if m.removedgateways == nil {
		m.removedgateways = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.gateways, ids[i])
		m.removedgateways[ids[i]] = struct{}{}
	}
}

// RemovedGateways returns the removed IDs of the "gateways" edge to the Gateway entity.
func (m *UserMutation) RemovedGatewaysIDs() (ids []int) {
	for id := range m.removedgateways {
		ids = append(ids, id)
	}
	return
}

// GatewaysIDs returns the "gateways" edge IDs in the mutation.
func (m *UserMutation) GatewaysIDs() (ids []int) {
	for id := range m.gateways {
		ids = append(ids, id)
	}
	return
}

// ResetGateways resets all changes to the "gateways" edge.
func (m *UserMutation) ResetGateways() {
	m.gateways = nil
	m.clearedgateways = false
	m.removedgateways = nil
}

// AddGroupIDs adds the "groups" edge to the Group entity by ids.
func (m *UserMutation) AddGroupIDs(ids ...int) {
	if m.groups == nil {
		m.groups = make(map[int]struct{})
	}
	for i := range ids {
		m.groups[ids[i]] = struct{}{}
	}
}

// ClearGroups clears the "groups" edge to the Group entity.
func (m *UserMutation) ClearGroups() {
	m.clearedgroups = true
}

// GroupsCleared reports if the "groups" edge to the Group entity was cleared.
func (m *UserMutation) GroupsCleared() bool {
	return m.clearedgroups
}

// RemoveGroupIDs removes the "groups" edge to the Group entity by IDs.
func (m *UserMutation) RemoveGroupIDs(ids ...int) {
	if m.removedgroups == nil {
		m.removedgroups = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.groups, ids[i])
		m.removedgroups[ids[i]] = struct{}{}
	}
}

// RemovedGroups returns the removed IDs of the "groups" edge to the Group entity.
func (m *UserMutation) RemovedGroupsIDs() (ids []int) {
	for id := range m.removedgroups {
		ids = append(ids, id)
	}
	return
}

// GroupsIDs returns the "groups" edge IDs in the mutation.
func (m *UserMutation) GroupsIDs() (ids []int) {
	for id := range m.groups {
		ids = append(ids, id)
	}
	return
}

// ResetGroups resets all changes to the "groups" edge.
func (m *UserMutation) ResetGroups() {
	m.groups = nil
	m.clearedgroups = false
	m.removedgroups = nil
}

// AddManageIDs adds the "manage" edge to the Group entity by ids.
func (m *UserMutation) AddManageIDs(ids ...int) {
	if m.manage == nil {
		m.manage = make(map[int]struct{})
	}
	for i := range ids {
		m.manage[ids[i]] = struct{}{}
	}
}

// ClearManage clears the "manage" edge to the Group entity.
func (m *UserMutation) ClearManage() {
	m.clearedmanage = true
}

// ManageCleared reports if the "manage" edge to the Group entity was cleared.
func (m *UserMutation) ManageCleared() bool {
	return m.clearedmanage
}

// RemoveManageIDs removes the "manage" edge to the Group entity by IDs.
func (m *UserMutation) RemoveManageIDs(ids ...int) {
	if m.removedmanage == nil {
		m.removedmanage = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.manage, ids[i])
		m.removedmanage[ids[i]] = struct{}{}
	}
}

// RemovedManage returns the removed IDs of the "manage" edge to the Group entity.
func (m *UserMutation) RemovedManageIDs() (ids []int) {
	for id := range m.removedmanage {
		ids = append(ids, id)
	}
	return
}

// ManageIDs returns the "manage" edge IDs in the mutation.
func (m *UserMutation) ManageIDs() (ids []int) {
	for id := range m.manage {
		ids = append(ids, id)
	}
	return
}

// ResetManage resets all changes to the "manage" edge.
func (m *UserMutation) ResetManage() {
	m.manage = nil
	m.clearedmanage = false
	m.removedmanage = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.create_time != nil {
		fields = append(fields, user.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, user.FieldUpdateTime)
	}
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.passwd != nil {
		fields = append(fields, user.FieldPasswd)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldCreateTime:
		return m.CreateTime()
	case user.FieldUpdateTime:
		return m.UpdateTime()
	case user.FieldName:
		return m.Name()
	case user.FieldPasswd:
		return m.Passwd()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case user.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldPasswd:
		return m.OldPasswd(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case user.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldPasswd:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPasswd(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case user.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldPasswd:
		m.ResetPasswd()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.gateways != nil {
		edges = append(edges, user.EdgeGateways)
	}
	if m.groups != nil {
		edges = append(edges, user.EdgeGroups)
	}
	if m.manage != nil {
		edges = append(edges, user.EdgeManage)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeGateways:
		ids := make([]ent.Value, 0, len(m.gateways))
		for id := range m.gateways {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeGroups:
		ids := make([]ent.Value, 0, len(m.groups))
		for id := range m.groups {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeManage:
		ids := make([]ent.Value, 0, len(m.manage))
		for id := range m.manage {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedgateways != nil {
		edges = append(edges, user.EdgeGateways)
	}
	if m.removedgroups != nil {
		edges = append(edges, user.EdgeGroups)
	}
	if m.removedmanage != nil {
		edges = append(edges, user.EdgeManage)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeGateways:
		ids := make([]ent.Value, 0, len(m.removedgateways))
		for id := range m.removedgateways {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeGroups:
		ids := make([]ent.Value, 0, len(m.removedgroups))
		for id := range m.removedgroups {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeManage:
		ids := make([]ent.Value, 0, len(m.removedmanage))
		for id := range m.removedmanage {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedgateways {
		edges = append(edges, user.EdgeGateways)
	}
	if m.clearedgroups {
		edges = append(edges, user.EdgeGroups)
	}
	if m.clearedmanage {
		edges = append(edges, user.EdgeManage)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeGateways:
		return m.clearedgateways
	case user.EdgeGroups:
		return m.clearedgroups
	case user.EdgeManage:
		return m.clearedmanage
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeGateways:
		m.ResetGateways()
		return nil
	case user.EdgeGroups:
		m.ResetGroups()
		return nil
	case user.EdgeManage:
		m.ResetManage()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
