// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/yjiong/iotdor/ent/device"
	"github.com/yjiong/iotdor/ent/gateway"
	"github.com/yjiong/iotdor/ent/group"
	"github.com/yjiong/iotdor/ent/organizationposition"
	"github.com/yjiong/iotdor/ent/organizationtree"
	"github.com/yjiong/iotdor/ent/predicate"
	"github.com/yjiong/iotdor/ent/user"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeDevice               = "Device"
	TypeGateway              = "Gateway"
	TypeGroup                = "Group"
	TypeOrganizationPosition = "OrganizationPosition"
	TypeOrganizationTree     = "OrganizationTree"
	TypeUser                 = "User"
)

// DeviceMutation represents an operation that mutates the Device nodes in the graph.
type DeviceMutation struct {
	config
	op                           Op
	typ                          string
	id                           *int
	create_time                  *time.Time
	update_time                  *time.Time
	dev_id                       *string
	_type                        *string
	conn                         *map[string]interface{}
	read_interval                *int
	addread_interval             *int
	store_interval               *int
	addstore_interval            *int
	name                         *string
	delete_flag                  *bool
	summary                      *string
	clearedFields                map[string]struct{}
	organization_position        *int
	clearedorganization_position bool
	gateway                      *int
	clearedgateway               bool
	done                         bool
	oldValue                     func(context.Context) (*Device, error)
	predicates                   []predicate.Device
}

var _ ent.Mutation = (*DeviceMutation)(nil)

// deviceOption allows management of the mutation configuration using functional options.
type deviceOption func(*DeviceMutation)

// newDeviceMutation creates new mutation for the Device entity.
func newDeviceMutation(c config, op Op, opts ...deviceOption) *DeviceMutation {
	m := &DeviceMutation{
		config:        c,
		op:            op,
		typ:           TypeDevice,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDeviceID sets the ID field of the mutation.
func withDeviceID(id int) deviceOption {
	return func(m *DeviceMutation) {
		var (
			err   error
			once  sync.Once
			value *Device
		)
		m.oldValue = func(ctx context.Context) (*Device, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Device.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDevice sets the old Device of the mutation.
func withDevice(node *Device) deviceOption {
	return func(m *DeviceMutation) {
		m.oldValue = func(context.Context) (*Device, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DeviceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DeviceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DeviceMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DeviceMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Device.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *DeviceMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *DeviceMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Device entity.
// If the Device object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *DeviceMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *DeviceMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *DeviceMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Device entity.
// If the Device object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *DeviceMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetDevID sets the "dev_id" field.
func (m *DeviceMutation) SetDevID(s string) {
	m.dev_id = &s
}

// DevID returns the value of the "dev_id" field in the mutation.
func (m *DeviceMutation) DevID() (r string, exists bool) {
	v := m.dev_id
	if v == nil {
		return
	}
	return *v, true
}

// OldDevID returns the old "dev_id" field's value of the Device entity.
// If the Device object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceMutation) OldDevID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDevID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDevID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDevID: %w", err)
	}
	return oldValue.DevID, nil
}

// ResetDevID resets all changes to the "dev_id" field.
func (m *DeviceMutation) ResetDevID() {
	m.dev_id = nil
}

// SetType sets the "type" field.
func (m *DeviceMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *DeviceMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Device entity.
// If the Device object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *DeviceMutation) ResetType() {
	m._type = nil
}

// SetConn sets the "conn" field.
func (m *DeviceMutation) SetConn(value map[string]interface{}) {
	m.conn = &value
}

// Conn returns the value of the "conn" field in the mutation.
func (m *DeviceMutation) Conn() (r map[string]interface{}, exists bool) {
	v := m.conn
	if v == nil {
		return
	}
	return *v, true
}

// OldConn returns the old "conn" field's value of the Device entity.
// If the Device object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceMutation) OldConn(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldConn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldConn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConn: %w", err)
	}
	return oldValue.Conn, nil
}

// ResetConn resets all changes to the "conn" field.
func (m *DeviceMutation) ResetConn() {
	m.conn = nil
}

// SetReadInterval sets the "read_interval" field.
func (m *DeviceMutation) SetReadInterval(i int) {
	m.read_interval = &i
	m.addread_interval = nil
}

// ReadInterval returns the value of the "read_interval" field in the mutation.
func (m *DeviceMutation) ReadInterval() (r int, exists bool) {
	v := m.read_interval
	if v == nil {
		return
	}
	return *v, true
}

// OldReadInterval returns the old "read_interval" field's value of the Device entity.
// If the Device object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceMutation) OldReadInterval(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReadInterval is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReadInterval requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReadInterval: %w", err)
	}
	return oldValue.ReadInterval, nil
}

// AddReadInterval adds i to the "read_interval" field.
func (m *DeviceMutation) AddReadInterval(i int) {
	if m.addread_interval != nil {
		*m.addread_interval += i
	} else {
		m.addread_interval = &i
	}
}

// AddedReadInterval returns the value that was added to the "read_interval" field in this mutation.
func (m *DeviceMutation) AddedReadInterval() (r int, exists bool) {
	v := m.addread_interval
	if v == nil {
		return
	}
	return *v, true
}

// ClearReadInterval clears the value of the "read_interval" field.
func (m *DeviceMutation) ClearReadInterval() {
	m.read_interval = nil
	m.addread_interval = nil
	m.clearedFields[device.FieldReadInterval] = struct{}{}
}

// ReadIntervalCleared returns if the "read_interval" field was cleared in this mutation.
func (m *DeviceMutation) ReadIntervalCleared() bool {
	_, ok := m.clearedFields[device.FieldReadInterval]
	return ok
}

// ResetReadInterval resets all changes to the "read_interval" field.
func (m *DeviceMutation) ResetReadInterval() {
	m.read_interval = nil
	m.addread_interval = nil
	delete(m.clearedFields, device.FieldReadInterval)
}

// SetStoreInterval sets the "store_interval" field.
func (m *DeviceMutation) SetStoreInterval(i int) {
	m.store_interval = &i
	m.addstore_interval = nil
}

// StoreInterval returns the value of the "store_interval" field in the mutation.
func (m *DeviceMutation) StoreInterval() (r int, exists bool) {
	v := m.store_interval
	if v == nil {
		return
	}
	return *v, true
}

// OldStoreInterval returns the old "store_interval" field's value of the Device entity.
// If the Device object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceMutation) OldStoreInterval(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStoreInterval is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStoreInterval requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStoreInterval: %w", err)
	}
	return oldValue.StoreInterval, nil
}

// AddStoreInterval adds i to the "store_interval" field.
func (m *DeviceMutation) AddStoreInterval(i int) {
	if m.addstore_interval != nil {
		*m.addstore_interval += i
	} else {
		m.addstore_interval = &i
	}
}

// AddedStoreInterval returns the value that was added to the "store_interval" field in this mutation.
func (m *DeviceMutation) AddedStoreInterval() (r int, exists bool) {
	v := m.addstore_interval
	if v == nil {
		return
	}
	return *v, true
}

// ClearStoreInterval clears the value of the "store_interval" field.
func (m *DeviceMutation) ClearStoreInterval() {
	m.store_interval = nil
	m.addstore_interval = nil
	m.clearedFields[device.FieldStoreInterval] = struct{}{}
}

// StoreIntervalCleared returns if the "store_interval" field was cleared in this mutation.
func (m *DeviceMutation) StoreIntervalCleared() bool {
	_, ok := m.clearedFields[device.FieldStoreInterval]
	return ok
}

// ResetStoreInterval resets all changes to the "store_interval" field.
func (m *DeviceMutation) ResetStoreInterval() {
	m.store_interval = nil
	m.addstore_interval = nil
	delete(m.clearedFields, device.FieldStoreInterval)
}

// SetName sets the "name" field.
func (m *DeviceMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *DeviceMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Device entity.
// If the Device object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *DeviceMutation) ClearName() {
	m.name = nil
	m.clearedFields[device.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *DeviceMutation) NameCleared() bool {
	_, ok := m.clearedFields[device.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *DeviceMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, device.FieldName)
}

// SetDeleteFlag sets the "delete_flag" field.
func (m *DeviceMutation) SetDeleteFlag(b bool) {
	m.delete_flag = &b
}

// DeleteFlag returns the value of the "delete_flag" field in the mutation.
func (m *DeviceMutation) DeleteFlag() (r bool, exists bool) {
	v := m.delete_flag
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteFlag returns the old "delete_flag" field's value of the Device entity.
// If the Device object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceMutation) OldDeleteFlag(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteFlag is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteFlag requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteFlag: %w", err)
	}
	return oldValue.DeleteFlag, nil
}

// ClearDeleteFlag clears the value of the "delete_flag" field.
func (m *DeviceMutation) ClearDeleteFlag() {
	m.delete_flag = nil
	m.clearedFields[device.FieldDeleteFlag] = struct{}{}
}

// DeleteFlagCleared returns if the "delete_flag" field was cleared in this mutation.
func (m *DeviceMutation) DeleteFlagCleared() bool {
	_, ok := m.clearedFields[device.FieldDeleteFlag]
	return ok
}

// ResetDeleteFlag resets all changes to the "delete_flag" field.
func (m *DeviceMutation) ResetDeleteFlag() {
	m.delete_flag = nil
	delete(m.clearedFields, device.FieldDeleteFlag)
}

// SetSummary sets the "summary" field.
func (m *DeviceMutation) SetSummary(s string) {
	m.summary = &s
}

// Summary returns the value of the "summary" field in the mutation.
func (m *DeviceMutation) Summary() (r string, exists bool) {
	v := m.summary
	if v == nil {
		return
	}
	return *v, true
}

// OldSummary returns the old "summary" field's value of the Device entity.
// If the Device object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceMutation) OldSummary(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSummary is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSummary requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSummary: %w", err)
	}
	return oldValue.Summary, nil
}

// ClearSummary clears the value of the "summary" field.
func (m *DeviceMutation) ClearSummary() {
	m.summary = nil
	m.clearedFields[device.FieldSummary] = struct{}{}
}

// SummaryCleared returns if the "summary" field was cleared in this mutation.
func (m *DeviceMutation) SummaryCleared() bool {
	_, ok := m.clearedFields[device.FieldSummary]
	return ok
}

// ResetSummary resets all changes to the "summary" field.
func (m *DeviceMutation) ResetSummary() {
	m.summary = nil
	delete(m.clearedFields, device.FieldSummary)
}

// SetOrganizationPositionID sets the "organization_position" edge to the OrganizationPosition entity by id.
func (m *DeviceMutation) SetOrganizationPositionID(id int) {
	m.organization_position = &id
}

// ClearOrganizationPosition clears the "organization_position" edge to the OrganizationPosition entity.
func (m *DeviceMutation) ClearOrganizationPosition() {
	m.clearedorganization_position = true
}

// OrganizationPositionCleared reports if the "organization_position" edge to the OrganizationPosition entity was cleared.
func (m *DeviceMutation) OrganizationPositionCleared() bool {
	return m.clearedorganization_position
}

// OrganizationPositionID returns the "organization_position" edge ID in the mutation.
func (m *DeviceMutation) OrganizationPositionID() (id int, exists bool) {
	if m.organization_position != nil {
		return *m.organization_position, true
	}
	return
}

// OrganizationPositionIDs returns the "organization_position" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OrganizationPositionID instead. It exists only for internal usage by the builders.
func (m *DeviceMutation) OrganizationPositionIDs() (ids []int) {
	if id := m.organization_position; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOrganizationPosition resets all changes to the "organization_position" edge.
func (m *DeviceMutation) ResetOrganizationPosition() {
	m.organization_position = nil
	m.clearedorganization_position = false
}

// SetGatewayID sets the "gateway" edge to the Gateway entity by id.
func (m *DeviceMutation) SetGatewayID(id int) {
	m.gateway = &id
}

// ClearGateway clears the "gateway" edge to the Gateway entity.
func (m *DeviceMutation) ClearGateway() {
	m.clearedgateway = true
}

// GatewayCleared reports if the "gateway" edge to the Gateway entity was cleared.
func (m *DeviceMutation) GatewayCleared() bool {
	return m.clearedgateway
}

// GatewayID returns the "gateway" edge ID in the mutation.
func (m *DeviceMutation) GatewayID() (id int, exists bool) {
	if m.gateway != nil {
		return *m.gateway, true
	}
	return
}

// GatewayIDs returns the "gateway" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// GatewayID instead. It exists only for internal usage by the builders.
func (m *DeviceMutation) GatewayIDs() (ids []int) {
	if id := m.gateway; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGateway resets all changes to the "gateway" edge.
func (m *DeviceMutation) ResetGateway() {
	m.gateway = nil
	m.clearedgateway = false
}

// Where appends a list predicates to the DeviceMutation builder.
func (m *DeviceMutation) Where(ps ...predicate.Device) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *DeviceMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Device).
func (m *DeviceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DeviceMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.create_time != nil {
		fields = append(fields, device.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, device.FieldUpdateTime)
	}
	if m.dev_id != nil {
		fields = append(fields, device.FieldDevID)
	}
	if m._type != nil {
		fields = append(fields, device.FieldType)
	}
	if m.conn != nil {
		fields = append(fields, device.FieldConn)
	}
	if m.read_interval != nil {
		fields = append(fields, device.FieldReadInterval)
	}
	if m.store_interval != nil {
		fields = append(fields, device.FieldStoreInterval)
	}
	if m.name != nil {
		fields = append(fields, device.FieldName)
	}
	if m.delete_flag != nil {
		fields = append(fields, device.FieldDeleteFlag)
	}
	if m.summary != nil {
		fields = append(fields, device.FieldSummary)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DeviceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case device.FieldCreateTime:
		return m.CreateTime()
	case device.FieldUpdateTime:
		return m.UpdateTime()
	case device.FieldDevID:
		return m.DevID()
	case device.FieldType:
		return m.GetType()
	case device.FieldConn:
		return m.Conn()
	case device.FieldReadInterval:
		return m.ReadInterval()
	case device.FieldStoreInterval:
		return m.StoreInterval()
	case device.FieldName:
		return m.Name()
	case device.FieldDeleteFlag:
		return m.DeleteFlag()
	case device.FieldSummary:
		return m.Summary()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DeviceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case device.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case device.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case device.FieldDevID:
		return m.OldDevID(ctx)
	case device.FieldType:
		return m.OldType(ctx)
	case device.FieldConn:
		return m.OldConn(ctx)
	case device.FieldReadInterval:
		return m.OldReadInterval(ctx)
	case device.FieldStoreInterval:
		return m.OldStoreInterval(ctx)
	case device.FieldName:
		return m.OldName(ctx)
	case device.FieldDeleteFlag:
		return m.OldDeleteFlag(ctx)
	case device.FieldSummary:
		return m.OldSummary(ctx)
	}
	return nil, fmt.Errorf("unknown Device field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DeviceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case device.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case device.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case device.FieldDevID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDevID(v)
		return nil
	case device.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case device.FieldConn:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConn(v)
		return nil
	case device.FieldReadInterval:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReadInterval(v)
		return nil
	case device.FieldStoreInterval:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStoreInterval(v)
		return nil
	case device.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case device.FieldDeleteFlag:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteFlag(v)
		return nil
	case device.FieldSummary:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSummary(v)
		return nil
	}
	return fmt.Errorf("unknown Device field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DeviceMutation) AddedFields() []string {
	var fields []string
	if m.addread_interval != nil {
		fields = append(fields, device.FieldReadInterval)
	}
	if m.addstore_interval != nil {
		fields = append(fields, device.FieldStoreInterval)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DeviceMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case device.FieldReadInterval:
		return m.AddedReadInterval()
	case device.FieldStoreInterval:
		return m.AddedStoreInterval()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DeviceMutation) AddField(name string, value ent.Value) error {
	switch name {
	case device.FieldReadInterval:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddReadInterval(v)
		return nil
	case device.FieldStoreInterval:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStoreInterval(v)
		return nil
	}
	return fmt.Errorf("unknown Device numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DeviceMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(device.FieldReadInterval) {
		fields = append(fields, device.FieldReadInterval)
	}
	if m.FieldCleared(device.FieldStoreInterval) {
		fields = append(fields, device.FieldStoreInterval)
	}
	if m.FieldCleared(device.FieldName) {
		fields = append(fields, device.FieldName)
	}
	if m.FieldCleared(device.FieldDeleteFlag) {
		fields = append(fields, device.FieldDeleteFlag)
	}
	if m.FieldCleared(device.FieldSummary) {
		fields = append(fields, device.FieldSummary)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DeviceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DeviceMutation) ClearField(name string) error {
	switch name {
	case device.FieldReadInterval:
		m.ClearReadInterval()
		return nil
	case device.FieldStoreInterval:
		m.ClearStoreInterval()
		return nil
	case device.FieldName:
		m.ClearName()
		return nil
	case device.FieldDeleteFlag:
		m.ClearDeleteFlag()
		return nil
	case device.FieldSummary:
		m.ClearSummary()
		return nil
	}
	return fmt.Errorf("unknown Device nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DeviceMutation) ResetField(name string) error {
	switch name {
	case device.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case device.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case device.FieldDevID:
		m.ResetDevID()
		return nil
	case device.FieldType:
		m.ResetType()
		return nil
	case device.FieldConn:
		m.ResetConn()
		return nil
	case device.FieldReadInterval:
		m.ResetReadInterval()
		return nil
	case device.FieldStoreInterval:
		m.ResetStoreInterval()
		return nil
	case device.FieldName:
		m.ResetName()
		return nil
	case device.FieldDeleteFlag:
		m.ResetDeleteFlag()
		return nil
	case device.FieldSummary:
		m.ResetSummary()
		return nil
	}
	return fmt.Errorf("unknown Device field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DeviceMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.organization_position != nil {
		edges = append(edges, device.EdgeOrganizationPosition)
	}
	if m.gateway != nil {
		edges = append(edges, device.EdgeGateway)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DeviceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case device.EdgeOrganizationPosition:
		if id := m.organization_position; id != nil {
			return []ent.Value{*id}
		}
	case device.EdgeGateway:
		if id := m.gateway; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DeviceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DeviceMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DeviceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedorganization_position {
		edges = append(edges, device.EdgeOrganizationPosition)
	}
	if m.clearedgateway {
		edges = append(edges, device.EdgeGateway)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DeviceMutation) EdgeCleared(name string) bool {
	switch name {
	case device.EdgeOrganizationPosition:
		return m.clearedorganization_position
	case device.EdgeGateway:
		return m.clearedgateway
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DeviceMutation) ClearEdge(name string) error {
	switch name {
	case device.EdgeOrganizationPosition:
		m.ClearOrganizationPosition()
		return nil
	case device.EdgeGateway:
		m.ClearGateway()
		return nil
	}
	return fmt.Errorf("unknown Device unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DeviceMutation) ResetEdge(name string) error {
	switch name {
	case device.EdgeOrganizationPosition:
		m.ResetOrganizationPosition()
		return nil
	case device.EdgeGateway:
		m.ResetGateway()
		return nil
	}
	return fmt.Errorf("unknown Device edge %s", name)
}

// GatewayMutation represents an operation that mutates the Gateway nodes in the graph.
type GatewayMutation struct {
	config
	op                    Op
	typ                   string
	id                    *int
	create_time           *time.Time
	update_time           *time.Time
	gwid                  *string
	svrid                 *string
	broker                *string
	installation_location *string
	stat                  *string
	delete_flag           *bool
	up_interval           *int
	addup_interval        *int
	version               *string
	summary               *string
	clearedFields         map[string]struct{}
	devices               map[int]struct{}
	removeddevices        map[int]struct{}
	cleareddevices        bool
	group                 *int
	clearedgroup          bool
	done                  bool
	oldValue              func(context.Context) (*Gateway, error)
	predicates            []predicate.Gateway
}

var _ ent.Mutation = (*GatewayMutation)(nil)

// gatewayOption allows management of the mutation configuration using functional options.
type gatewayOption func(*GatewayMutation)

// newGatewayMutation creates new mutation for the Gateway entity.
func newGatewayMutation(c config, op Op, opts ...gatewayOption) *GatewayMutation {
	m := &GatewayMutation{
		config:        c,
		op:            op,
		typ:           TypeGateway,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGatewayID sets the ID field of the mutation.
func withGatewayID(id int) gatewayOption {
	return func(m *GatewayMutation) {
		var (
			err   error
			once  sync.Once
			value *Gateway
		)
		m.oldValue = func(ctx context.Context) (*Gateway, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Gateway.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGateway sets the old Gateway of the mutation.
func withGateway(node *Gateway) gatewayOption {
	return func(m *GatewayMutation) {
		m.oldValue = func(context.Context) (*Gateway, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GatewayMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GatewayMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GatewayMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GatewayMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Gateway.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *GatewayMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *GatewayMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Gateway entity.
// If the Gateway object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GatewayMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *GatewayMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *GatewayMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *GatewayMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Gateway entity.
// If the Gateway object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GatewayMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *GatewayMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetGwid sets the "gwid" field.
func (m *GatewayMutation) SetGwid(s string) {
	m.gwid = &s
}

// Gwid returns the value of the "gwid" field in the mutation.
func (m *GatewayMutation) Gwid() (r string, exists bool) {
	v := m.gwid
	if v == nil {
		return
	}
	return *v, true
}

// OldGwid returns the old "gwid" field's value of the Gateway entity.
// If the Gateway object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GatewayMutation) OldGwid(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGwid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGwid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGwid: %w", err)
	}
	return oldValue.Gwid, nil
}

// ResetGwid resets all changes to the "gwid" field.
func (m *GatewayMutation) ResetGwid() {
	m.gwid = nil
}

// SetSvrid sets the "svrid" field.
func (m *GatewayMutation) SetSvrid(s string) {
	m.svrid = &s
}

// Svrid returns the value of the "svrid" field in the mutation.
func (m *GatewayMutation) Svrid() (r string, exists bool) {
	v := m.svrid
	if v == nil {
		return
	}
	return *v, true
}

// OldSvrid returns the old "svrid" field's value of the Gateway entity.
// If the Gateway object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GatewayMutation) OldSvrid(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSvrid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSvrid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSvrid: %w", err)
	}
	return oldValue.Svrid, nil
}

// ResetSvrid resets all changes to the "svrid" field.
func (m *GatewayMutation) ResetSvrid() {
	m.svrid = nil
}

// SetBroker sets the "broker" field.
func (m *GatewayMutation) SetBroker(s string) {
	m.broker = &s
}

// Broker returns the value of the "broker" field in the mutation.
func (m *GatewayMutation) Broker() (r string, exists bool) {
	v := m.broker
	if v == nil {
		return
	}
	return *v, true
}

// OldBroker returns the old "broker" field's value of the Gateway entity.
// If the Gateway object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GatewayMutation) OldBroker(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBroker is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBroker requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBroker: %w", err)
	}
	return oldValue.Broker, nil
}

// ResetBroker resets all changes to the "broker" field.
func (m *GatewayMutation) ResetBroker() {
	m.broker = nil
}

// SetInstallationLocation sets the "installation_location" field.
func (m *GatewayMutation) SetInstallationLocation(s string) {
	m.installation_location = &s
}

// InstallationLocation returns the value of the "installation_location" field in the mutation.
func (m *GatewayMutation) InstallationLocation() (r string, exists bool) {
	v := m.installation_location
	if v == nil {
		return
	}
	return *v, true
}

// OldInstallationLocation returns the old "installation_location" field's value of the Gateway entity.
// If the Gateway object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GatewayMutation) OldInstallationLocation(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInstallationLocation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInstallationLocation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInstallationLocation: %w", err)
	}
	return oldValue.InstallationLocation, nil
}

// ClearInstallationLocation clears the value of the "installation_location" field.
func (m *GatewayMutation) ClearInstallationLocation() {
	m.installation_location = nil
	m.clearedFields[gateway.FieldInstallationLocation] = struct{}{}
}

// InstallationLocationCleared returns if the "installation_location" field was cleared in this mutation.
func (m *GatewayMutation) InstallationLocationCleared() bool {
	_, ok := m.clearedFields[gateway.FieldInstallationLocation]
	return ok
}

// ResetInstallationLocation resets all changes to the "installation_location" field.
func (m *GatewayMutation) ResetInstallationLocation() {
	m.installation_location = nil
	delete(m.clearedFields, gateway.FieldInstallationLocation)
}

// SetStat sets the "stat" field.
func (m *GatewayMutation) SetStat(s string) {
	m.stat = &s
}

// Stat returns the value of the "stat" field in the mutation.
func (m *GatewayMutation) Stat() (r string, exists bool) {
	v := m.stat
	if v == nil {
		return
	}
	return *v, true
}

// OldStat returns the old "stat" field's value of the Gateway entity.
// If the Gateway object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GatewayMutation) OldStat(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStat is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStat requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStat: %w", err)
	}
	return oldValue.Stat, nil
}

// ClearStat clears the value of the "stat" field.
func (m *GatewayMutation) ClearStat() {
	m.stat = nil
	m.clearedFields[gateway.FieldStat] = struct{}{}
}

// StatCleared returns if the "stat" field was cleared in this mutation.
func (m *GatewayMutation) StatCleared() bool {
	_, ok := m.clearedFields[gateway.FieldStat]
	return ok
}

// ResetStat resets all changes to the "stat" field.
func (m *GatewayMutation) ResetStat() {
	m.stat = nil
	delete(m.clearedFields, gateway.FieldStat)
}

// SetDeleteFlag sets the "delete_flag" field.
func (m *GatewayMutation) SetDeleteFlag(b bool) {
	m.delete_flag = &b
}

// DeleteFlag returns the value of the "delete_flag" field in the mutation.
func (m *GatewayMutation) DeleteFlag() (r bool, exists bool) {
	v := m.delete_flag
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteFlag returns the old "delete_flag" field's value of the Gateway entity.
// If the Gateway object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GatewayMutation) OldDeleteFlag(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteFlag is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteFlag requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteFlag: %w", err)
	}
	return oldValue.DeleteFlag, nil
}

// ClearDeleteFlag clears the value of the "delete_flag" field.
func (m *GatewayMutation) ClearDeleteFlag() {
	m.delete_flag = nil
	m.clearedFields[gateway.FieldDeleteFlag] = struct{}{}
}

// DeleteFlagCleared returns if the "delete_flag" field was cleared in this mutation.
func (m *GatewayMutation) DeleteFlagCleared() bool {
	_, ok := m.clearedFields[gateway.FieldDeleteFlag]
	return ok
}

// ResetDeleteFlag resets all changes to the "delete_flag" field.
func (m *GatewayMutation) ResetDeleteFlag() {
	m.delete_flag = nil
	delete(m.clearedFields, gateway.FieldDeleteFlag)
}

// SetUpInterval sets the "up_interval" field.
func (m *GatewayMutation) SetUpInterval(i int) {
	m.up_interval = &i
	m.addup_interval = nil
}

// UpInterval returns the value of the "up_interval" field in the mutation.
func (m *GatewayMutation) UpInterval() (r int, exists bool) {
	v := m.up_interval
	if v == nil {
		return
	}
	return *v, true
}

// OldUpInterval returns the old "up_interval" field's value of the Gateway entity.
// If the Gateway object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GatewayMutation) OldUpInterval(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpInterval is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpInterval requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpInterval: %w", err)
	}
	return oldValue.UpInterval, nil
}

// AddUpInterval adds i to the "up_interval" field.
func (m *GatewayMutation) AddUpInterval(i int) {
	if m.addup_interval != nil {
		*m.addup_interval += i
	} else {
		m.addup_interval = &i
	}
}

// AddedUpInterval returns the value that was added to the "up_interval" field in this mutation.
func (m *GatewayMutation) AddedUpInterval() (r int, exists bool) {
	v := m.addup_interval
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpInterval resets all changes to the "up_interval" field.
func (m *GatewayMutation) ResetUpInterval() {
	m.up_interval = nil
	m.addup_interval = nil
}

// SetVersion sets the "version" field.
func (m *GatewayMutation) SetVersion(s string) {
	m.version = &s
}

// Version returns the value of the "version" field in the mutation.
func (m *GatewayMutation) Version() (r string, exists bool) {
	v := m.version
	if v == nil {
		return
	}
	return *v, true
}

// OldVersion returns the old "version" field's value of the Gateway entity.
// If the Gateway object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GatewayMutation) OldVersion(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVersion: %w", err)
	}
	return oldValue.Version, nil
}

// ClearVersion clears the value of the "version" field.
func (m *GatewayMutation) ClearVersion() {
	m.version = nil
	m.clearedFields[gateway.FieldVersion] = struct{}{}
}

// VersionCleared returns if the "version" field was cleared in this mutation.
func (m *GatewayMutation) VersionCleared() bool {
	_, ok := m.clearedFields[gateway.FieldVersion]
	return ok
}

// ResetVersion resets all changes to the "version" field.
func (m *GatewayMutation) ResetVersion() {
	m.version = nil
	delete(m.clearedFields, gateway.FieldVersion)
}

// SetSummary sets the "summary" field.
func (m *GatewayMutation) SetSummary(s string) {
	m.summary = &s
}

// Summary returns the value of the "summary" field in the mutation.
func (m *GatewayMutation) Summary() (r string, exists bool) {
	v := m.summary
	if v == nil {
		return
	}
	return *v, true
}

// OldSummary returns the old "summary" field's value of the Gateway entity.
// If the Gateway object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GatewayMutation) OldSummary(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSummary is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSummary requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSummary: %w", err)
	}
	return oldValue.Summary, nil
}

// ClearSummary clears the value of the "summary" field.
func (m *GatewayMutation) ClearSummary() {
	m.summary = nil
	m.clearedFields[gateway.FieldSummary] = struct{}{}
}

// SummaryCleared returns if the "summary" field was cleared in this mutation.
func (m *GatewayMutation) SummaryCleared() bool {
	_, ok := m.clearedFields[gateway.FieldSummary]
	return ok
}

// ResetSummary resets all changes to the "summary" field.
func (m *GatewayMutation) ResetSummary() {
	m.summary = nil
	delete(m.clearedFields, gateway.FieldSummary)
}

// AddDeviceIDs adds the "devices" edge to the Device entity by ids.
func (m *GatewayMutation) AddDeviceIDs(ids ...int) {
	if m.devices == nil {
		m.devices = make(map[int]struct{})
	}
	for i := range ids {
		m.devices[ids[i]] = struct{}{}
	}
}

// ClearDevices clears the "devices" edge to the Device entity.
func (m *GatewayMutation) ClearDevices() {
	m.cleareddevices = true
}

// DevicesCleared reports if the "devices" edge to the Device entity was cleared.
func (m *GatewayMutation) DevicesCleared() bool {
	return m.cleareddevices
}

// RemoveDeviceIDs removes the "devices" edge to the Device entity by IDs.
func (m *GatewayMutation) RemoveDeviceIDs(ids ...int) {
	if m.removeddevices == nil {
		m.removeddevices = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.devices, ids[i])
		m.removeddevices[ids[i]] = struct{}{}
	}
}

// RemovedDevices returns the removed IDs of the "devices" edge to the Device entity.
func (m *GatewayMutation) RemovedDevicesIDs() (ids []int) {
	for id := range m.removeddevices {
		ids = append(ids, id)
	}
	return
}

// DevicesIDs returns the "devices" edge IDs in the mutation.
func (m *GatewayMutation) DevicesIDs() (ids []int) {
	for id := range m.devices {
		ids = append(ids, id)
	}
	return
}

// ResetDevices resets all changes to the "devices" edge.
func (m *GatewayMutation) ResetDevices() {
	m.devices = nil
	m.cleareddevices = false
	m.removeddevices = nil
}

// SetGroupID sets the "group" edge to the Group entity by id.
func (m *GatewayMutation) SetGroupID(id int) {
	m.group = &id
}

// ClearGroup clears the "group" edge to the Group entity.
func (m *GatewayMutation) ClearGroup() {
	m.clearedgroup = true
}

// GroupCleared reports if the "group" edge to the Group entity was cleared.
func (m *GatewayMutation) GroupCleared() bool {
	return m.clearedgroup
}

// GroupID returns the "group" edge ID in the mutation.
func (m *GatewayMutation) GroupID() (id int, exists bool) {
	if m.group != nil {
		return *m.group, true
	}
	return
}

// GroupIDs returns the "group" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// GroupID instead. It exists only for internal usage by the builders.
func (m *GatewayMutation) GroupIDs() (ids []int) {
	if id := m.group; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGroup resets all changes to the "group" edge.
func (m *GatewayMutation) ResetGroup() {
	m.group = nil
	m.clearedgroup = false
}

// Where appends a list predicates to the GatewayMutation builder.
func (m *GatewayMutation) Where(ps ...predicate.Gateway) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *GatewayMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Gateway).
func (m *GatewayMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GatewayMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.create_time != nil {
		fields = append(fields, gateway.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, gateway.FieldUpdateTime)
	}
	if m.gwid != nil {
		fields = append(fields, gateway.FieldGwid)
	}
	if m.svrid != nil {
		fields = append(fields, gateway.FieldSvrid)
	}
	if m.broker != nil {
		fields = append(fields, gateway.FieldBroker)
	}
	if m.installation_location != nil {
		fields = append(fields, gateway.FieldInstallationLocation)
	}
	if m.stat != nil {
		fields = append(fields, gateway.FieldStat)
	}
	if m.delete_flag != nil {
		fields = append(fields, gateway.FieldDeleteFlag)
	}
	if m.up_interval != nil {
		fields = append(fields, gateway.FieldUpInterval)
	}
	if m.version != nil {
		fields = append(fields, gateway.FieldVersion)
	}
	if m.summary != nil {
		fields = append(fields, gateway.FieldSummary)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GatewayMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case gateway.FieldCreateTime:
		return m.CreateTime()
	case gateway.FieldUpdateTime:
		return m.UpdateTime()
	case gateway.FieldGwid:
		return m.Gwid()
	case gateway.FieldSvrid:
		return m.Svrid()
	case gateway.FieldBroker:
		return m.Broker()
	case gateway.FieldInstallationLocation:
		return m.InstallationLocation()
	case gateway.FieldStat:
		return m.Stat()
	case gateway.FieldDeleteFlag:
		return m.DeleteFlag()
	case gateway.FieldUpInterval:
		return m.UpInterval()
	case gateway.FieldVersion:
		return m.Version()
	case gateway.FieldSummary:
		return m.Summary()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GatewayMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case gateway.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case gateway.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case gateway.FieldGwid:
		return m.OldGwid(ctx)
	case gateway.FieldSvrid:
		return m.OldSvrid(ctx)
	case gateway.FieldBroker:
		return m.OldBroker(ctx)
	case gateway.FieldInstallationLocation:
		return m.OldInstallationLocation(ctx)
	case gateway.FieldStat:
		return m.OldStat(ctx)
	case gateway.FieldDeleteFlag:
		return m.OldDeleteFlag(ctx)
	case gateway.FieldUpInterval:
		return m.OldUpInterval(ctx)
	case gateway.FieldVersion:
		return m.OldVersion(ctx)
	case gateway.FieldSummary:
		return m.OldSummary(ctx)
	}
	return nil, fmt.Errorf("unknown Gateway field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GatewayMutation) SetField(name string, value ent.Value) error {
	switch name {
	case gateway.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case gateway.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case gateway.FieldGwid:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGwid(v)
		return nil
	case gateway.FieldSvrid:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSvrid(v)
		return nil
	case gateway.FieldBroker:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBroker(v)
		return nil
	case gateway.FieldInstallationLocation:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInstallationLocation(v)
		return nil
	case gateway.FieldStat:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStat(v)
		return nil
	case gateway.FieldDeleteFlag:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteFlag(v)
		return nil
	case gateway.FieldUpInterval:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpInterval(v)
		return nil
	case gateway.FieldVersion:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVersion(v)
		return nil
	case gateway.FieldSummary:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSummary(v)
		return nil
	}
	return fmt.Errorf("unknown Gateway field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GatewayMutation) AddedFields() []string {
	var fields []string
	if m.addup_interval != nil {
		fields = append(fields, gateway.FieldUpInterval)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GatewayMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case gateway.FieldUpInterval:
		return m.AddedUpInterval()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GatewayMutation) AddField(name string, value ent.Value) error {
	switch name {
	case gateway.FieldUpInterval:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpInterval(v)
		return nil
	}
	return fmt.Errorf("unknown Gateway numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GatewayMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(gateway.FieldInstallationLocation) {
		fields = append(fields, gateway.FieldInstallationLocation)
	}
	if m.FieldCleared(gateway.FieldStat) {
		fields = append(fields, gateway.FieldStat)
	}
	if m.FieldCleared(gateway.FieldDeleteFlag) {
		fields = append(fields, gateway.FieldDeleteFlag)
	}
	if m.FieldCleared(gateway.FieldVersion) {
		fields = append(fields, gateway.FieldVersion)
	}
	if m.FieldCleared(gateway.FieldSummary) {
		fields = append(fields, gateway.FieldSummary)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GatewayMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GatewayMutation) ClearField(name string) error {
	switch name {
	case gateway.FieldInstallationLocation:
		m.ClearInstallationLocation()
		return nil
	case gateway.FieldStat:
		m.ClearStat()
		return nil
	case gateway.FieldDeleteFlag:
		m.ClearDeleteFlag()
		return nil
	case gateway.FieldVersion:
		m.ClearVersion()
		return nil
	case gateway.FieldSummary:
		m.ClearSummary()
		return nil
	}
	return fmt.Errorf("unknown Gateway nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GatewayMutation) ResetField(name string) error {
	switch name {
	case gateway.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case gateway.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case gateway.FieldGwid:
		m.ResetGwid()
		return nil
	case gateway.FieldSvrid:
		m.ResetSvrid()
		return nil
	case gateway.FieldBroker:
		m.ResetBroker()
		return nil
	case gateway.FieldInstallationLocation:
		m.ResetInstallationLocation()
		return nil
	case gateway.FieldStat:
		m.ResetStat()
		return nil
	case gateway.FieldDeleteFlag:
		m.ResetDeleteFlag()
		return nil
	case gateway.FieldUpInterval:
		m.ResetUpInterval()
		return nil
	case gateway.FieldVersion:
		m.ResetVersion()
		return nil
	case gateway.FieldSummary:
		m.ResetSummary()
		return nil
	}
	return fmt.Errorf("unknown Gateway field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GatewayMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.devices != nil {
		edges = append(edges, gateway.EdgeDevices)
	}
	if m.group != nil {
		edges = append(edges, gateway.EdgeGroup)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GatewayMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case gateway.EdgeDevices:
		ids := make([]ent.Value, 0, len(m.devices))
		for id := range m.devices {
			ids = append(ids, id)
		}
		return ids
	case gateway.EdgeGroup:
		if id := m.group; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GatewayMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removeddevices != nil {
		edges = append(edges, gateway.EdgeDevices)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GatewayMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case gateway.EdgeDevices:
		ids := make([]ent.Value, 0, len(m.removeddevices))
		for id := range m.removeddevices {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GatewayMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareddevices {
		edges = append(edges, gateway.EdgeDevices)
	}
	if m.clearedgroup {
		edges = append(edges, gateway.EdgeGroup)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GatewayMutation) EdgeCleared(name string) bool {
	switch name {
	case gateway.EdgeDevices:
		return m.cleareddevices
	case gateway.EdgeGroup:
		return m.clearedgroup
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GatewayMutation) ClearEdge(name string) error {
	switch name {
	case gateway.EdgeGroup:
		m.ClearGroup()
		return nil
	}
	return fmt.Errorf("unknown Gateway unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GatewayMutation) ResetEdge(name string) error {
	switch name {
	case gateway.EdgeDevices:
		m.ResetDevices()
		return nil
	case gateway.EdgeGroup:
		m.ResetGroup()
		return nil
	}
	return fmt.Errorf("unknown Gateway edge %s", name)
}

// GroupMutation represents an operation that mutates the Group nodes in the graph.
type GroupMutation struct {
	config
	op              Op
	typ             string
	id              *int
	name            *string
	summary         *string
	clearedFields   map[string]struct{}
	users           map[int]struct{}
	removedusers    map[int]struct{}
	clearedusers    bool
	admins          map[int]struct{}
	removedadmins   map[int]struct{}
	clearedadmins   bool
	gateways        map[int]struct{}
	removedgateways map[int]struct{}
	clearedgateways bool
	done            bool
	oldValue        func(context.Context) (*Group, error)
	predicates      []predicate.Group
}

var _ ent.Mutation = (*GroupMutation)(nil)

// groupOption allows management of the mutation configuration using functional options.
type groupOption func(*GroupMutation)

// newGroupMutation creates new mutation for the Group entity.
func newGroupMutation(c config, op Op, opts ...groupOption) *GroupMutation {
	m := &GroupMutation{
		config:        c,
		op:            op,
		typ:           TypeGroup,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGroupID sets the ID field of the mutation.
func withGroupID(id int) groupOption {
	return func(m *GroupMutation) {
		var (
			err   error
			once  sync.Once
			value *Group
		)
		m.oldValue = func(ctx context.Context) (*Group, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Group.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGroup sets the old Group of the mutation.
func withGroup(node *Group) groupOption {
	return func(m *GroupMutation) {
		m.oldValue = func(context.Context) (*Group, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GroupMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GroupMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GroupMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GroupMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Group.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *GroupMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *GroupMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *GroupMutation) ResetName() {
	m.name = nil
}

// SetSummary sets the "summary" field.
func (m *GroupMutation) SetSummary(s string) {
	m.summary = &s
}

// Summary returns the value of the "summary" field in the mutation.
func (m *GroupMutation) Summary() (r string, exists bool) {
	v := m.summary
	if v == nil {
		return
	}
	return *v, true
}

// OldSummary returns the old "summary" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldSummary(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSummary is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSummary requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSummary: %w", err)
	}
	return oldValue.Summary, nil
}

// ClearSummary clears the value of the "summary" field.
func (m *GroupMutation) ClearSummary() {
	m.summary = nil
	m.clearedFields[group.FieldSummary] = struct{}{}
}

// SummaryCleared returns if the "summary" field was cleared in this mutation.
func (m *GroupMutation) SummaryCleared() bool {
	_, ok := m.clearedFields[group.FieldSummary]
	return ok
}

// ResetSummary resets all changes to the "summary" field.
func (m *GroupMutation) ResetSummary() {
	m.summary = nil
	delete(m.clearedFields, group.FieldSummary)
}

// AddUserIDs adds the "users" edge to the User entity by ids.
func (m *GroupMutation) AddUserIDs(ids ...int) {
	if m.users == nil {
		m.users = make(map[int]struct{})
	}
	for i := range ids {
		m.users[ids[i]] = struct{}{}
	}
}

// ClearUsers clears the "users" edge to the User entity.
func (m *GroupMutation) ClearUsers() {
	m.clearedusers = true
}

// UsersCleared reports if the "users" edge to the User entity was cleared.
func (m *GroupMutation) UsersCleared() bool {
	return m.clearedusers
}

// RemoveUserIDs removes the "users" edge to the User entity by IDs.
func (m *GroupMutation) RemoveUserIDs(ids ...int) {
	if m.removedusers == nil {
		m.removedusers = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.users, ids[i])
		m.removedusers[ids[i]] = struct{}{}
	}
}

// RemovedUsers returns the removed IDs of the "users" edge to the User entity.
func (m *GroupMutation) RemovedUsersIDs() (ids []int) {
	for id := range m.removedusers {
		ids = append(ids, id)
	}
	return
}

// UsersIDs returns the "users" edge IDs in the mutation.
func (m *GroupMutation) UsersIDs() (ids []int) {
	for id := range m.users {
		ids = append(ids, id)
	}
	return
}

// ResetUsers resets all changes to the "users" edge.
func (m *GroupMutation) ResetUsers() {
	m.users = nil
	m.clearedusers = false
	m.removedusers = nil
}

// AddAdminIDs adds the "admins" edge to the User entity by ids.
func (m *GroupMutation) AddAdminIDs(ids ...int) {
	if m.admins == nil {
		m.admins = make(map[int]struct{})
	}
	for i := range ids {
		m.admins[ids[i]] = struct{}{}
	}
}

// ClearAdmins clears the "admins" edge to the User entity.
func (m *GroupMutation) ClearAdmins() {
	m.clearedadmins = true
}

// AdminsCleared reports if the "admins" edge to the User entity was cleared.
func (m *GroupMutation) AdminsCleared() bool {
	return m.clearedadmins
}

// RemoveAdminIDs removes the "admins" edge to the User entity by IDs.
func (m *GroupMutation) RemoveAdminIDs(ids ...int) {
	if m.removedadmins == nil {
		m.removedadmins = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.admins, ids[i])
		m.removedadmins[ids[i]] = struct{}{}
	}
}

// RemovedAdmins returns the removed IDs of the "admins" edge to the User entity.
func (m *GroupMutation) RemovedAdminsIDs() (ids []int) {
	for id := range m.removedadmins {
		ids = append(ids, id)
	}
	return
}

// AdminsIDs returns the "admins" edge IDs in the mutation.
func (m *GroupMutation) AdminsIDs() (ids []int) {
	for id := range m.admins {
		ids = append(ids, id)
	}
	return
}

// ResetAdmins resets all changes to the "admins" edge.
func (m *GroupMutation) ResetAdmins() {
	m.admins = nil
	m.clearedadmins = false
	m.removedadmins = nil
}

// AddGatewayIDs adds the "gateways" edge to the Gateway entity by ids.
func (m *GroupMutation) AddGatewayIDs(ids ...int) {
	if m.gateways == nil {
		m.gateways = make(map[int]struct{})
	}
	for i := range ids {
		m.gateways[ids[i]] = struct{}{}
	}
}

// ClearGateways clears the "gateways" edge to the Gateway entity.
func (m *GroupMutation) ClearGateways() {
	m.clearedgateways = true
}

// GatewaysCleared reports if the "gateways" edge to the Gateway entity was cleared.
func (m *GroupMutation) GatewaysCleared() bool {
	return m.clearedgateways
}

// RemoveGatewayIDs removes the "gateways" edge to the Gateway entity by IDs.
func (m *GroupMutation) RemoveGatewayIDs(ids ...int) {
	if m.removedgateways == nil {
		m.removedgateways = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.gateways, ids[i])
		m.removedgateways[ids[i]] = struct{}{}
	}
}

// RemovedGateways returns the removed IDs of the "gateways" edge to the Gateway entity.
func (m *GroupMutation) RemovedGatewaysIDs() (ids []int) {
	for id := range m.removedgateways {
		ids = append(ids, id)
	}
	return
}

// GatewaysIDs returns the "gateways" edge IDs in the mutation.
func (m *GroupMutation) GatewaysIDs() (ids []int) {
	for id := range m.gateways {
		ids = append(ids, id)
	}
	return
}

// ResetGateways resets all changes to the "gateways" edge.
func (m *GroupMutation) ResetGateways() {
	m.gateways = nil
	m.clearedgateways = false
	m.removedgateways = nil
}

// Where appends a list predicates to the GroupMutation builder.
func (m *GroupMutation) Where(ps ...predicate.Group) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *GroupMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Group).
func (m *GroupMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GroupMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, group.FieldName)
	}
	if m.summary != nil {
		fields = append(fields, group.FieldSummary)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GroupMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case group.FieldName:
		return m.Name()
	case group.FieldSummary:
		return m.Summary()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GroupMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case group.FieldName:
		return m.OldName(ctx)
	case group.FieldSummary:
		return m.OldSummary(ctx)
	}
	return nil, fmt.Errorf("unknown Group field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupMutation) SetField(name string, value ent.Value) error {
	switch name {
	case group.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case group.FieldSummary:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSummary(v)
		return nil
	}
	return fmt.Errorf("unknown Group field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GroupMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GroupMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Group numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GroupMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(group.FieldSummary) {
		fields = append(fields, group.FieldSummary)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GroupMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GroupMutation) ClearField(name string) error {
	switch name {
	case group.FieldSummary:
		m.ClearSummary()
		return nil
	}
	return fmt.Errorf("unknown Group nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GroupMutation) ResetField(name string) error {
	switch name {
	case group.FieldName:
		m.ResetName()
		return nil
	case group.FieldSummary:
		m.ResetSummary()
		return nil
	}
	return fmt.Errorf("unknown Group field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GroupMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.users != nil {
		edges = append(edges, group.EdgeUsers)
	}
	if m.admins != nil {
		edges = append(edges, group.EdgeAdmins)
	}
	if m.gateways != nil {
		edges = append(edges, group.EdgeGateways)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GroupMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case group.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.users))
		for id := range m.users {
			ids = append(ids, id)
		}
		return ids
	case group.EdgeAdmins:
		ids := make([]ent.Value, 0, len(m.admins))
		for id := range m.admins {
			ids = append(ids, id)
		}
		return ids
	case group.EdgeGateways:
		ids := make([]ent.Value, 0, len(m.gateways))
		for id := range m.gateways {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GroupMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedusers != nil {
		edges = append(edges, group.EdgeUsers)
	}
	if m.removedadmins != nil {
		edges = append(edges, group.EdgeAdmins)
	}
	if m.removedgateways != nil {
		edges = append(edges, group.EdgeGateways)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GroupMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case group.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.removedusers))
		for id := range m.removedusers {
			ids = append(ids, id)
		}
		return ids
	case group.EdgeAdmins:
		ids := make([]ent.Value, 0, len(m.removedadmins))
		for id := range m.removedadmins {
			ids = append(ids, id)
		}
		return ids
	case group.EdgeGateways:
		ids := make([]ent.Value, 0, len(m.removedgateways))
		for id := range m.removedgateways {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GroupMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedusers {
		edges = append(edges, group.EdgeUsers)
	}
	if m.clearedadmins {
		edges = append(edges, group.EdgeAdmins)
	}
	if m.clearedgateways {
		edges = append(edges, group.EdgeGateways)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GroupMutation) EdgeCleared(name string) bool {
	switch name {
	case group.EdgeUsers:
		return m.clearedusers
	case group.EdgeAdmins:
		return m.clearedadmins
	case group.EdgeGateways:
		return m.clearedgateways
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GroupMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Group unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GroupMutation) ResetEdge(name string) error {
	switch name {
	case group.EdgeUsers:
		m.ResetUsers()
		return nil
	case group.EdgeAdmins:
		m.ResetAdmins()
		return nil
	case group.EdgeGateways:
		m.ResetGateways()
		return nil
	}
	return fmt.Errorf("unknown Group edge %s", name)
}

// OrganizationPositionMutation represents an operation that mutates the OrganizationPosition nodes in the graph.
type OrganizationPositionMutation struct {
	config
	op                       Op
	typ                      string
	id                       *int
	create_time              *time.Time
	update_time              *time.Time
	position_id              *string
	address                  *string
	floor                    *string
	unit_no                  *string
	longitude_and_latitude   *string
	summary                  *string
	clearedFields            map[string]struct{}
	devices                  map[int]struct{}
	removeddevices           map[int]struct{}
	cleareddevices           bool
	person_charges           map[int]struct{}
	removedperson_charges    map[int]struct{}
	clearedperson_charges    bool
	organization_tree        *int
	clearedorganization_tree bool
	done                     bool
	oldValue                 func(context.Context) (*OrganizationPosition, error)
	predicates               []predicate.OrganizationPosition
}

var _ ent.Mutation = (*OrganizationPositionMutation)(nil)

// organizationpositionOption allows management of the mutation configuration using functional options.
type organizationpositionOption func(*OrganizationPositionMutation)

// newOrganizationPositionMutation creates new mutation for the OrganizationPosition entity.
func newOrganizationPositionMutation(c config, op Op, opts ...organizationpositionOption) *OrganizationPositionMutation {
	m := &OrganizationPositionMutation{
		config:        c,
		op:            op,
		typ:           TypeOrganizationPosition,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOrganizationPositionID sets the ID field of the mutation.
func withOrganizationPositionID(id int) organizationpositionOption {
	return func(m *OrganizationPositionMutation) {
		var (
			err   error
			once  sync.Once
			value *OrganizationPosition
		)
		m.oldValue = func(ctx context.Context) (*OrganizationPosition, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().OrganizationPosition.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOrganizationPosition sets the old OrganizationPosition of the mutation.
func withOrganizationPosition(node *OrganizationPosition) organizationpositionOption {
	return func(m *OrganizationPositionMutation) {
		m.oldValue = func(context.Context) (*OrganizationPosition, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OrganizationPositionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OrganizationPositionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OrganizationPositionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OrganizationPositionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().OrganizationPosition.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *OrganizationPositionMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *OrganizationPositionMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the OrganizationPosition entity.
// If the OrganizationPosition object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationPositionMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *OrganizationPositionMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *OrganizationPositionMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *OrganizationPositionMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the OrganizationPosition entity.
// If the OrganizationPosition object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationPositionMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *OrganizationPositionMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetPositionID sets the "position_id" field.
func (m *OrganizationPositionMutation) SetPositionID(s string) {
	m.position_id = &s
}

// PositionID returns the value of the "position_id" field in the mutation.
func (m *OrganizationPositionMutation) PositionID() (r string, exists bool) {
	v := m.position_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPositionID returns the old "position_id" field's value of the OrganizationPosition entity.
// If the OrganizationPosition object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationPositionMutation) OldPositionID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPositionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPositionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPositionID: %w", err)
	}
	return oldValue.PositionID, nil
}

// ResetPositionID resets all changes to the "position_id" field.
func (m *OrganizationPositionMutation) ResetPositionID() {
	m.position_id = nil
}

// SetAddress sets the "address" field.
func (m *OrganizationPositionMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *OrganizationPositionMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the OrganizationPosition entity.
// If the OrganizationPosition object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationPositionMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ResetAddress resets all changes to the "address" field.
func (m *OrganizationPositionMutation) ResetAddress() {
	m.address = nil
}

// SetFloor sets the "floor" field.
func (m *OrganizationPositionMutation) SetFloor(s string) {
	m.floor = &s
}

// Floor returns the value of the "floor" field in the mutation.
func (m *OrganizationPositionMutation) Floor() (r string, exists bool) {
	v := m.floor
	if v == nil {
		return
	}
	return *v, true
}

// OldFloor returns the old "floor" field's value of the OrganizationPosition entity.
// If the OrganizationPosition object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationPositionMutation) OldFloor(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFloor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFloor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFloor: %w", err)
	}
	return oldValue.Floor, nil
}

// ClearFloor clears the value of the "floor" field.
func (m *OrganizationPositionMutation) ClearFloor() {
	m.floor = nil
	m.clearedFields[organizationposition.FieldFloor] = struct{}{}
}

// FloorCleared returns if the "floor" field was cleared in this mutation.
func (m *OrganizationPositionMutation) FloorCleared() bool {
	_, ok := m.clearedFields[organizationposition.FieldFloor]
	return ok
}

// ResetFloor resets all changes to the "floor" field.
func (m *OrganizationPositionMutation) ResetFloor() {
	m.floor = nil
	delete(m.clearedFields, organizationposition.FieldFloor)
}

// SetUnitNo sets the "unit_no" field.
func (m *OrganizationPositionMutation) SetUnitNo(s string) {
	m.unit_no = &s
}

// UnitNo returns the value of the "unit_no" field in the mutation.
func (m *OrganizationPositionMutation) UnitNo() (r string, exists bool) {
	v := m.unit_no
	if v == nil {
		return
	}
	return *v, true
}

// OldUnitNo returns the old "unit_no" field's value of the OrganizationPosition entity.
// If the OrganizationPosition object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationPositionMutation) OldUnitNo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUnitNo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUnitNo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUnitNo: %w", err)
	}
	return oldValue.UnitNo, nil
}

// ClearUnitNo clears the value of the "unit_no" field.
func (m *OrganizationPositionMutation) ClearUnitNo() {
	m.unit_no = nil
	m.clearedFields[organizationposition.FieldUnitNo] = struct{}{}
}

// UnitNoCleared returns if the "unit_no" field was cleared in this mutation.
func (m *OrganizationPositionMutation) UnitNoCleared() bool {
	_, ok := m.clearedFields[organizationposition.FieldUnitNo]
	return ok
}

// ResetUnitNo resets all changes to the "unit_no" field.
func (m *OrganizationPositionMutation) ResetUnitNo() {
	m.unit_no = nil
	delete(m.clearedFields, organizationposition.FieldUnitNo)
}

// SetLongitudeAndLatitude sets the "longitude_and_latitude" field.
func (m *OrganizationPositionMutation) SetLongitudeAndLatitude(s string) {
	m.longitude_and_latitude = &s
}

// LongitudeAndLatitude returns the value of the "longitude_and_latitude" field in the mutation.
func (m *OrganizationPositionMutation) LongitudeAndLatitude() (r string, exists bool) {
	v := m.longitude_and_latitude
	if v == nil {
		return
	}
	return *v, true
}

// OldLongitudeAndLatitude returns the old "longitude_and_latitude" field's value of the OrganizationPosition entity.
// If the OrganizationPosition object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationPositionMutation) OldLongitudeAndLatitude(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLongitudeAndLatitude is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLongitudeAndLatitude requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLongitudeAndLatitude: %w", err)
	}
	return oldValue.LongitudeAndLatitude, nil
}

// ResetLongitudeAndLatitude resets all changes to the "longitude_and_latitude" field.
func (m *OrganizationPositionMutation) ResetLongitudeAndLatitude() {
	m.longitude_and_latitude = nil
}

// SetSummary sets the "summary" field.
func (m *OrganizationPositionMutation) SetSummary(s string) {
	m.summary = &s
}

// Summary returns the value of the "summary" field in the mutation.
func (m *OrganizationPositionMutation) Summary() (r string, exists bool) {
	v := m.summary
	if v == nil {
		return
	}
	return *v, true
}

// OldSummary returns the old "summary" field's value of the OrganizationPosition entity.
// If the OrganizationPosition object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationPositionMutation) OldSummary(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSummary is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSummary requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSummary: %w", err)
	}
	return oldValue.Summary, nil
}

// ClearSummary clears the value of the "summary" field.
func (m *OrganizationPositionMutation) ClearSummary() {
	m.summary = nil
	m.clearedFields[organizationposition.FieldSummary] = struct{}{}
}

// SummaryCleared returns if the "summary" field was cleared in this mutation.
func (m *OrganizationPositionMutation) SummaryCleared() bool {
	_, ok := m.clearedFields[organizationposition.FieldSummary]
	return ok
}

// ResetSummary resets all changes to the "summary" field.
func (m *OrganizationPositionMutation) ResetSummary() {
	m.summary = nil
	delete(m.clearedFields, organizationposition.FieldSummary)
}

// AddDeviceIDs adds the "devices" edge to the Device entity by ids.
func (m *OrganizationPositionMutation) AddDeviceIDs(ids ...int) {
	if m.devices == nil {
		m.devices = make(map[int]struct{})
	}
	for i := range ids {
		m.devices[ids[i]] = struct{}{}
	}
}

// ClearDevices clears the "devices" edge to the Device entity.
func (m *OrganizationPositionMutation) ClearDevices() {
	m.cleareddevices = true
}

// DevicesCleared reports if the "devices" edge to the Device entity was cleared.
func (m *OrganizationPositionMutation) DevicesCleared() bool {
	return m.cleareddevices
}

// RemoveDeviceIDs removes the "devices" edge to the Device entity by IDs.
func (m *OrganizationPositionMutation) RemoveDeviceIDs(ids ...int) {
	if m.removeddevices == nil {
		m.removeddevices = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.devices, ids[i])
		m.removeddevices[ids[i]] = struct{}{}
	}
}

// RemovedDevices returns the removed IDs of the "devices" edge to the Device entity.
func (m *OrganizationPositionMutation) RemovedDevicesIDs() (ids []int) {
	for id := range m.removeddevices {
		ids = append(ids, id)
	}
	return
}

// DevicesIDs returns the "devices" edge IDs in the mutation.
func (m *OrganizationPositionMutation) DevicesIDs() (ids []int) {
	for id := range m.devices {
		ids = append(ids, id)
	}
	return
}

// ResetDevices resets all changes to the "devices" edge.
func (m *OrganizationPositionMutation) ResetDevices() {
	m.devices = nil
	m.cleareddevices = false
	m.removeddevices = nil
}

// AddPersonChargeIDs adds the "person_charges" edge to the User entity by ids.
func (m *OrganizationPositionMutation) AddPersonChargeIDs(ids ...int) {
	if m.person_charges == nil {
		m.person_charges = make(map[int]struct{})
	}
	for i := range ids {
		m.person_charges[ids[i]] = struct{}{}
	}
}

// ClearPersonCharges clears the "person_charges" edge to the User entity.
func (m *OrganizationPositionMutation) ClearPersonCharges() {
	m.clearedperson_charges = true
}

// PersonChargesCleared reports if the "person_charges" edge to the User entity was cleared.
func (m *OrganizationPositionMutation) PersonChargesCleared() bool {
	return m.clearedperson_charges
}

// RemovePersonChargeIDs removes the "person_charges" edge to the User entity by IDs.
func (m *OrganizationPositionMutation) RemovePersonChargeIDs(ids ...int) {
	if m.removedperson_charges == nil {
		m.removedperson_charges = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.person_charges, ids[i])
		m.removedperson_charges[ids[i]] = struct{}{}
	}
}

// RemovedPersonCharges returns the removed IDs of the "person_charges" edge to the User entity.
func (m *OrganizationPositionMutation) RemovedPersonChargesIDs() (ids []int) {
	for id := range m.removedperson_charges {
		ids = append(ids, id)
	}
	return
}

// PersonChargesIDs returns the "person_charges" edge IDs in the mutation.
func (m *OrganizationPositionMutation) PersonChargesIDs() (ids []int) {
	for id := range m.person_charges {
		ids = append(ids, id)
	}
	return
}

// ResetPersonCharges resets all changes to the "person_charges" edge.
func (m *OrganizationPositionMutation) ResetPersonCharges() {
	m.person_charges = nil
	m.clearedperson_charges = false
	m.removedperson_charges = nil
}

// SetOrganizationTreeID sets the "organization_tree" edge to the OrganizationTree entity by id.
func (m *OrganizationPositionMutation) SetOrganizationTreeID(id int) {
	m.organization_tree = &id
}

// ClearOrganizationTree clears the "organization_tree" edge to the OrganizationTree entity.
func (m *OrganizationPositionMutation) ClearOrganizationTree() {
	m.clearedorganization_tree = true
}

// OrganizationTreeCleared reports if the "organization_tree" edge to the OrganizationTree entity was cleared.
func (m *OrganizationPositionMutation) OrganizationTreeCleared() bool {
	return m.clearedorganization_tree
}

// OrganizationTreeID returns the "organization_tree" edge ID in the mutation.
func (m *OrganizationPositionMutation) OrganizationTreeID() (id int, exists bool) {
	if m.organization_tree != nil {
		return *m.organization_tree, true
	}
	return
}

// OrganizationTreeIDs returns the "organization_tree" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OrganizationTreeID instead. It exists only for internal usage by the builders.
func (m *OrganizationPositionMutation) OrganizationTreeIDs() (ids []int) {
	if id := m.organization_tree; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOrganizationTree resets all changes to the "organization_tree" edge.
func (m *OrganizationPositionMutation) ResetOrganizationTree() {
	m.organization_tree = nil
	m.clearedorganization_tree = false
}

// Where appends a list predicates to the OrganizationPositionMutation builder.
func (m *OrganizationPositionMutation) Where(ps ...predicate.OrganizationPosition) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *OrganizationPositionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (OrganizationPosition).
func (m *OrganizationPositionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OrganizationPositionMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.create_time != nil {
		fields = append(fields, organizationposition.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, organizationposition.FieldUpdateTime)
	}
	if m.position_id != nil {
		fields = append(fields, organizationposition.FieldPositionID)
	}
	if m.address != nil {
		fields = append(fields, organizationposition.FieldAddress)
	}
	if m.floor != nil {
		fields = append(fields, organizationposition.FieldFloor)
	}
	if m.unit_no != nil {
		fields = append(fields, organizationposition.FieldUnitNo)
	}
	if m.longitude_and_latitude != nil {
		fields = append(fields, organizationposition.FieldLongitudeAndLatitude)
	}
	if m.summary != nil {
		fields = append(fields, organizationposition.FieldSummary)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OrganizationPositionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case organizationposition.FieldCreateTime:
		return m.CreateTime()
	case organizationposition.FieldUpdateTime:
		return m.UpdateTime()
	case organizationposition.FieldPositionID:
		return m.PositionID()
	case organizationposition.FieldAddress:
		return m.Address()
	case organizationposition.FieldFloor:
		return m.Floor()
	case organizationposition.FieldUnitNo:
		return m.UnitNo()
	case organizationposition.FieldLongitudeAndLatitude:
		return m.LongitudeAndLatitude()
	case organizationposition.FieldSummary:
		return m.Summary()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OrganizationPositionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case organizationposition.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case organizationposition.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case organizationposition.FieldPositionID:
		return m.OldPositionID(ctx)
	case organizationposition.FieldAddress:
		return m.OldAddress(ctx)
	case organizationposition.FieldFloor:
		return m.OldFloor(ctx)
	case organizationposition.FieldUnitNo:
		return m.OldUnitNo(ctx)
	case organizationposition.FieldLongitudeAndLatitude:
		return m.OldLongitudeAndLatitude(ctx)
	case organizationposition.FieldSummary:
		return m.OldSummary(ctx)
	}
	return nil, fmt.Errorf("unknown OrganizationPosition field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrganizationPositionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case organizationposition.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case organizationposition.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case organizationposition.FieldPositionID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPositionID(v)
		return nil
	case organizationposition.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case organizationposition.FieldFloor:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFloor(v)
		return nil
	case organizationposition.FieldUnitNo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUnitNo(v)
		return nil
	case organizationposition.FieldLongitudeAndLatitude:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLongitudeAndLatitude(v)
		return nil
	case organizationposition.FieldSummary:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSummary(v)
		return nil
	}
	return fmt.Errorf("unknown OrganizationPosition field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OrganizationPositionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OrganizationPositionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrganizationPositionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown OrganizationPosition numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OrganizationPositionMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(organizationposition.FieldFloor) {
		fields = append(fields, organizationposition.FieldFloor)
	}
	if m.FieldCleared(organizationposition.FieldUnitNo) {
		fields = append(fields, organizationposition.FieldUnitNo)
	}
	if m.FieldCleared(organizationposition.FieldSummary) {
		fields = append(fields, organizationposition.FieldSummary)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OrganizationPositionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OrganizationPositionMutation) ClearField(name string) error {
	switch name {
	case organizationposition.FieldFloor:
		m.ClearFloor()
		return nil
	case organizationposition.FieldUnitNo:
		m.ClearUnitNo()
		return nil
	case organizationposition.FieldSummary:
		m.ClearSummary()
		return nil
	}
	return fmt.Errorf("unknown OrganizationPosition nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OrganizationPositionMutation) ResetField(name string) error {
	switch name {
	case organizationposition.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case organizationposition.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case organizationposition.FieldPositionID:
		m.ResetPositionID()
		return nil
	case organizationposition.FieldAddress:
		m.ResetAddress()
		return nil
	case organizationposition.FieldFloor:
		m.ResetFloor()
		return nil
	case organizationposition.FieldUnitNo:
		m.ResetUnitNo()
		return nil
	case organizationposition.FieldLongitudeAndLatitude:
		m.ResetLongitudeAndLatitude()
		return nil
	case organizationposition.FieldSummary:
		m.ResetSummary()
		return nil
	}
	return fmt.Errorf("unknown OrganizationPosition field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OrganizationPositionMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.devices != nil {
		edges = append(edges, organizationposition.EdgeDevices)
	}
	if m.person_charges != nil {
		edges = append(edges, organizationposition.EdgePersonCharges)
	}
	if m.organization_tree != nil {
		edges = append(edges, organizationposition.EdgeOrganizationTree)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OrganizationPositionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case organizationposition.EdgeDevices:
		ids := make([]ent.Value, 0, len(m.devices))
		for id := range m.devices {
			ids = append(ids, id)
		}
		return ids
	case organizationposition.EdgePersonCharges:
		ids := make([]ent.Value, 0, len(m.person_charges))
		for id := range m.person_charges {
			ids = append(ids, id)
		}
		return ids
	case organizationposition.EdgeOrganizationTree:
		if id := m.organization_tree; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OrganizationPositionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removeddevices != nil {
		edges = append(edges, organizationposition.EdgeDevices)
	}
	if m.removedperson_charges != nil {
		edges = append(edges, organizationposition.EdgePersonCharges)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OrganizationPositionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case organizationposition.EdgeDevices:
		ids := make([]ent.Value, 0, len(m.removeddevices))
		for id := range m.removeddevices {
			ids = append(ids, id)
		}
		return ids
	case organizationposition.EdgePersonCharges:
		ids := make([]ent.Value, 0, len(m.removedperson_charges))
		for id := range m.removedperson_charges {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OrganizationPositionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cleareddevices {
		edges = append(edges, organizationposition.EdgeDevices)
	}
	if m.clearedperson_charges {
		edges = append(edges, organizationposition.EdgePersonCharges)
	}
	if m.clearedorganization_tree {
		edges = append(edges, organizationposition.EdgeOrganizationTree)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OrganizationPositionMutation) EdgeCleared(name string) bool {
	switch name {
	case organizationposition.EdgeDevices:
		return m.cleareddevices
	case organizationposition.EdgePersonCharges:
		return m.clearedperson_charges
	case organizationposition.EdgeOrganizationTree:
		return m.clearedorganization_tree
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OrganizationPositionMutation) ClearEdge(name string) error {
	switch name {
	case organizationposition.EdgeOrganizationTree:
		m.ClearOrganizationTree()
		return nil
	}
	return fmt.Errorf("unknown OrganizationPosition unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OrganizationPositionMutation) ResetEdge(name string) error {
	switch name {
	case organizationposition.EdgeDevices:
		m.ResetDevices()
		return nil
	case organizationposition.EdgePersonCharges:
		m.ResetPersonCharges()
		return nil
	case organizationposition.EdgeOrganizationTree:
		m.ResetOrganizationTree()
		return nil
	}
	return fmt.Errorf("unknown OrganizationPosition edge %s", name)
}

// OrganizationTreeMutation represents an operation that mutates the OrganizationTree nodes in the graph.
type OrganizationTreeMutation struct {
	config
	op                            Op
	typ                           string
	id                            *int
	create_time                   *time.Time
	update_time                   *time.Time
	name                          *string
	parent_id                     *int
	addparent_id                  *int
	left                          *int
	addleft                       *int
	right                         *int
	addright                      *int
	level                         *int
	addlevel                      *int
	clearedFields                 map[string]struct{}
	organization_positions        map[int]struct{}
	removedorganization_positions map[int]struct{}
	clearedorganization_positions bool
	done                          bool
	oldValue                      func(context.Context) (*OrganizationTree, error)
	predicates                    []predicate.OrganizationTree
}

var _ ent.Mutation = (*OrganizationTreeMutation)(nil)

// organizationtreeOption allows management of the mutation configuration using functional options.
type organizationtreeOption func(*OrganizationTreeMutation)

// newOrganizationTreeMutation creates new mutation for the OrganizationTree entity.
func newOrganizationTreeMutation(c config, op Op, opts ...organizationtreeOption) *OrganizationTreeMutation {
	m := &OrganizationTreeMutation{
		config:        c,
		op:            op,
		typ:           TypeOrganizationTree,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOrganizationTreeID sets the ID field of the mutation.
func withOrganizationTreeID(id int) organizationtreeOption {
	return func(m *OrganizationTreeMutation) {
		var (
			err   error
			once  sync.Once
			value *OrganizationTree
		)
		m.oldValue = func(ctx context.Context) (*OrganizationTree, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().OrganizationTree.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOrganizationTree sets the old OrganizationTree of the mutation.
func withOrganizationTree(node *OrganizationTree) organizationtreeOption {
	return func(m *OrganizationTreeMutation) {
		m.oldValue = func(context.Context) (*OrganizationTree, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OrganizationTreeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OrganizationTreeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OrganizationTreeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OrganizationTreeMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().OrganizationTree.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *OrganizationTreeMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *OrganizationTreeMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the OrganizationTree entity.
// If the OrganizationTree object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationTreeMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *OrganizationTreeMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *OrganizationTreeMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *OrganizationTreeMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the OrganizationTree entity.
// If the OrganizationTree object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationTreeMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *OrganizationTreeMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetName sets the "name" field.
func (m *OrganizationTreeMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *OrganizationTreeMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the OrganizationTree entity.
// If the OrganizationTree object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationTreeMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *OrganizationTreeMutation) ResetName() {
	m.name = nil
}

// SetParentID sets the "parent_id" field.
func (m *OrganizationTreeMutation) SetParentID(i int) {
	m.parent_id = &i
	m.addparent_id = nil
}

// ParentID returns the value of the "parent_id" field in the mutation.
func (m *OrganizationTreeMutation) ParentID() (r int, exists bool) {
	v := m.parent_id
	if v == nil {
		return
	}
	return *v, true
}

// OldParentID returns the old "parent_id" field's value of the OrganizationTree entity.
// If the OrganizationTree object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationTreeMutation) OldParentID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParentID: %w", err)
	}
	return oldValue.ParentID, nil
}

// AddParentID adds i to the "parent_id" field.
func (m *OrganizationTreeMutation) AddParentID(i int) {
	if m.addparent_id != nil {
		*m.addparent_id += i
	} else {
		m.addparent_id = &i
	}
}

// AddedParentID returns the value that was added to the "parent_id" field in this mutation.
func (m *OrganizationTreeMutation) AddedParentID() (r int, exists bool) {
	v := m.addparent_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetParentID resets all changes to the "parent_id" field.
func (m *OrganizationTreeMutation) ResetParentID() {
	m.parent_id = nil
	m.addparent_id = nil
}

// SetLeft sets the "left" field.
func (m *OrganizationTreeMutation) SetLeft(i int) {
	m.left = &i
	m.addleft = nil
}

// Left returns the value of the "left" field in the mutation.
func (m *OrganizationTreeMutation) Left() (r int, exists bool) {
	v := m.left
	if v == nil {
		return
	}
	return *v, true
}

// OldLeft returns the old "left" field's value of the OrganizationTree entity.
// If the OrganizationTree object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationTreeMutation) OldLeft(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLeft is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLeft requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLeft: %w", err)
	}
	return oldValue.Left, nil
}

// AddLeft adds i to the "left" field.
func (m *OrganizationTreeMutation) AddLeft(i int) {
	if m.addleft != nil {
		*m.addleft += i
	} else {
		m.addleft = &i
	}
}

// AddedLeft returns the value that was added to the "left" field in this mutation.
func (m *OrganizationTreeMutation) AddedLeft() (r int, exists bool) {
	v := m.addleft
	if v == nil {
		return
	}
	return *v, true
}

// ResetLeft resets all changes to the "left" field.
func (m *OrganizationTreeMutation) ResetLeft() {
	m.left = nil
	m.addleft = nil
}

// SetRight sets the "right" field.
func (m *OrganizationTreeMutation) SetRight(i int) {
	m.right = &i
	m.addright = nil
}

// Right returns the value of the "right" field in the mutation.
func (m *OrganizationTreeMutation) Right() (r int, exists bool) {
	v := m.right
	if v == nil {
		return
	}
	return *v, true
}

// OldRight returns the old "right" field's value of the OrganizationTree entity.
// If the OrganizationTree object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationTreeMutation) OldRight(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRight is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRight requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRight: %w", err)
	}
	return oldValue.Right, nil
}

// AddRight adds i to the "right" field.
func (m *OrganizationTreeMutation) AddRight(i int) {
	if m.addright != nil {
		*m.addright += i
	} else {
		m.addright = &i
	}
}

// AddedRight returns the value that was added to the "right" field in this mutation.
func (m *OrganizationTreeMutation) AddedRight() (r int, exists bool) {
	v := m.addright
	if v == nil {
		return
	}
	return *v, true
}

// ResetRight resets all changes to the "right" field.
func (m *OrganizationTreeMutation) ResetRight() {
	m.right = nil
	m.addright = nil
}

// SetLevel sets the "level" field.
func (m *OrganizationTreeMutation) SetLevel(i int) {
	m.level = &i
	m.addlevel = nil
}

// Level returns the value of the "level" field in the mutation.
func (m *OrganizationTreeMutation) Level() (r int, exists bool) {
	v := m.level
	if v == nil {
		return
	}
	return *v, true
}

// OldLevel returns the old "level" field's value of the OrganizationTree entity.
// If the OrganizationTree object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationTreeMutation) OldLevel(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLevel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLevel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLevel: %w", err)
	}
	return oldValue.Level, nil
}

// AddLevel adds i to the "level" field.
func (m *OrganizationTreeMutation) AddLevel(i int) {
	if m.addlevel != nil {
		*m.addlevel += i
	} else {
		m.addlevel = &i
	}
}

// AddedLevel returns the value that was added to the "level" field in this mutation.
func (m *OrganizationTreeMutation) AddedLevel() (r int, exists bool) {
	v := m.addlevel
	if v == nil {
		return
	}
	return *v, true
}

// ResetLevel resets all changes to the "level" field.
func (m *OrganizationTreeMutation) ResetLevel() {
	m.level = nil
	m.addlevel = nil
}

// AddOrganizationPositionIDs adds the "organization_positions" edge to the OrganizationPosition entity by ids.
func (m *OrganizationTreeMutation) AddOrganizationPositionIDs(ids ...int) {
	if m.organization_positions == nil {
		m.organization_positions = make(map[int]struct{})
	}
	for i := range ids {
		m.organization_positions[ids[i]] = struct{}{}
	}
}

// ClearOrganizationPositions clears the "organization_positions" edge to the OrganizationPosition entity.
func (m *OrganizationTreeMutation) ClearOrganizationPositions() {
	m.clearedorganization_positions = true
}

// OrganizationPositionsCleared reports if the "organization_positions" edge to the OrganizationPosition entity was cleared.
func (m *OrganizationTreeMutation) OrganizationPositionsCleared() bool {
	return m.clearedorganization_positions
}

// RemoveOrganizationPositionIDs removes the "organization_positions" edge to the OrganizationPosition entity by IDs.
func (m *OrganizationTreeMutation) RemoveOrganizationPositionIDs(ids ...int) {
	if m.removedorganization_positions == nil {
		m.removedorganization_positions = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.organization_positions, ids[i])
		m.removedorganization_positions[ids[i]] = struct{}{}
	}
}

// RemovedOrganizationPositions returns the removed IDs of the "organization_positions" edge to the OrganizationPosition entity.
func (m *OrganizationTreeMutation) RemovedOrganizationPositionsIDs() (ids []int) {
	for id := range m.removedorganization_positions {
		ids = append(ids, id)
	}
	return
}

// OrganizationPositionsIDs returns the "organization_positions" edge IDs in the mutation.
func (m *OrganizationTreeMutation) OrganizationPositionsIDs() (ids []int) {
	for id := range m.organization_positions {
		ids = append(ids, id)
	}
	return
}

// ResetOrganizationPositions resets all changes to the "organization_positions" edge.
func (m *OrganizationTreeMutation) ResetOrganizationPositions() {
	m.organization_positions = nil
	m.clearedorganization_positions = false
	m.removedorganization_positions = nil
}

// Where appends a list predicates to the OrganizationTreeMutation builder.
func (m *OrganizationTreeMutation) Where(ps ...predicate.OrganizationTree) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *OrganizationTreeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (OrganizationTree).
func (m *OrganizationTreeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OrganizationTreeMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.create_time != nil {
		fields = append(fields, organizationtree.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, organizationtree.FieldUpdateTime)
	}
	if m.name != nil {
		fields = append(fields, organizationtree.FieldName)
	}
	if m.parent_id != nil {
		fields = append(fields, organizationtree.FieldParentID)
	}
	if m.left != nil {
		fields = append(fields, organizationtree.FieldLeft)
	}
	if m.right != nil {
		fields = append(fields, organizationtree.FieldRight)
	}
	if m.level != nil {
		fields = append(fields, organizationtree.FieldLevel)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OrganizationTreeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case organizationtree.FieldCreateTime:
		return m.CreateTime()
	case organizationtree.FieldUpdateTime:
		return m.UpdateTime()
	case organizationtree.FieldName:
		return m.Name()
	case organizationtree.FieldParentID:
		return m.ParentID()
	case organizationtree.FieldLeft:
		return m.Left()
	case organizationtree.FieldRight:
		return m.Right()
	case organizationtree.FieldLevel:
		return m.Level()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OrganizationTreeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case organizationtree.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case organizationtree.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case organizationtree.FieldName:
		return m.OldName(ctx)
	case organizationtree.FieldParentID:
		return m.OldParentID(ctx)
	case organizationtree.FieldLeft:
		return m.OldLeft(ctx)
	case organizationtree.FieldRight:
		return m.OldRight(ctx)
	case organizationtree.FieldLevel:
		return m.OldLevel(ctx)
	}
	return nil, fmt.Errorf("unknown OrganizationTree field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrganizationTreeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case organizationtree.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case organizationtree.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case organizationtree.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case organizationtree.FieldParentID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParentID(v)
		return nil
	case organizationtree.FieldLeft:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLeft(v)
		return nil
	case organizationtree.FieldRight:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRight(v)
		return nil
	case organizationtree.FieldLevel:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLevel(v)
		return nil
	}
	return fmt.Errorf("unknown OrganizationTree field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OrganizationTreeMutation) AddedFields() []string {
	var fields []string
	if m.addparent_id != nil {
		fields = append(fields, organizationtree.FieldParentID)
	}
	if m.addleft != nil {
		fields = append(fields, organizationtree.FieldLeft)
	}
	if m.addright != nil {
		fields = append(fields, organizationtree.FieldRight)
	}
	if m.addlevel != nil {
		fields = append(fields, organizationtree.FieldLevel)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OrganizationTreeMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case organizationtree.FieldParentID:
		return m.AddedParentID()
	case organizationtree.FieldLeft:
		return m.AddedLeft()
	case organizationtree.FieldRight:
		return m.AddedRight()
	case organizationtree.FieldLevel:
		return m.AddedLevel()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrganizationTreeMutation) AddField(name string, value ent.Value) error {
	switch name {
	case organizationtree.FieldParentID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddParentID(v)
		return nil
	case organizationtree.FieldLeft:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLeft(v)
		return nil
	case organizationtree.FieldRight:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRight(v)
		return nil
	case organizationtree.FieldLevel:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLevel(v)
		return nil
	}
	return fmt.Errorf("unknown OrganizationTree numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OrganizationTreeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OrganizationTreeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OrganizationTreeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown OrganizationTree nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OrganizationTreeMutation) ResetField(name string) error {
	switch name {
	case organizationtree.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case organizationtree.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case organizationtree.FieldName:
		m.ResetName()
		return nil
	case organizationtree.FieldParentID:
		m.ResetParentID()
		return nil
	case organizationtree.FieldLeft:
		m.ResetLeft()
		return nil
	case organizationtree.FieldRight:
		m.ResetRight()
		return nil
	case organizationtree.FieldLevel:
		m.ResetLevel()
		return nil
	}
	return fmt.Errorf("unknown OrganizationTree field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OrganizationTreeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.organization_positions != nil {
		edges = append(edges, organizationtree.EdgeOrganizationPositions)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OrganizationTreeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case organizationtree.EdgeOrganizationPositions:
		ids := make([]ent.Value, 0, len(m.organization_positions))
		for id := range m.organization_positions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OrganizationTreeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedorganization_positions != nil {
		edges = append(edges, organizationtree.EdgeOrganizationPositions)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OrganizationTreeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case organizationtree.EdgeOrganizationPositions:
		ids := make([]ent.Value, 0, len(m.removedorganization_positions))
		for id := range m.removedorganization_positions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OrganizationTreeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedorganization_positions {
		edges = append(edges, organizationtree.EdgeOrganizationPositions)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OrganizationTreeMutation) EdgeCleared(name string) bool {
	switch name {
	case organizationtree.EdgeOrganizationPositions:
		return m.clearedorganization_positions
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OrganizationTreeMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown OrganizationTree unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OrganizationTreeMutation) ResetEdge(name string) error {
	switch name {
	case organizationtree.EdgeOrganizationPositions:
		m.ResetOrganizationPositions()
		return nil
	}
	return fmt.Errorf("unknown OrganizationTree edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                    Op
	typ                   string
	id                    *int
	create_time           *time.Time
	update_time           *time.Time
	name                  *string
	passwd                *string
	phone                 *string
	last_login_ip         *string
	last_login_time       *time.Time
	clearedFields         map[string]struct{}
	groups                map[int]struct{}
	removedgroups         map[int]struct{}
	clearedgroups         bool
	admins                map[int]struct{}
	removedadmins         map[int]struct{}
	clearedadmins         bool
	person_charges        map[int]struct{}
	removedperson_charges map[int]struct{}
	clearedperson_charges bool
	done                  bool
	oldValue              func(context.Context) (*User, error)
	predicates            []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *UserMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *UserMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *UserMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *UserMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *UserMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *UserMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetPasswd sets the "passwd" field.
func (m *UserMutation) SetPasswd(s string) {
	m.passwd = &s
}

// Passwd returns the value of the "passwd" field in the mutation.
func (m *UserMutation) Passwd() (r string, exists bool) {
	v := m.passwd
	if v == nil {
		return
	}
	return *v, true
}

// OldPasswd returns the old "passwd" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPasswd(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPasswd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPasswd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPasswd: %w", err)
	}
	return oldValue.Passwd, nil
}

// ResetPasswd resets all changes to the "passwd" field.
func (m *UserMutation) ResetPasswd() {
	m.passwd = nil
}

// SetPhone sets the "phone" field.
func (m *UserMutation) SetPhone(s string) {
	m.phone = &s
}

// Phone returns the value of the "phone" field in the mutation.
func (m *UserMutation) Phone() (r string, exists bool) {
	v := m.phone
	if v == nil {
		return
	}
	return *v, true
}

// OldPhone returns the old "phone" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPhone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhone: %w", err)
	}
	return oldValue.Phone, nil
}

// ClearPhone clears the value of the "phone" field.
func (m *UserMutation) ClearPhone() {
	m.phone = nil
	m.clearedFields[user.FieldPhone] = struct{}{}
}

// PhoneCleared returns if the "phone" field was cleared in this mutation.
func (m *UserMutation) PhoneCleared() bool {
	_, ok := m.clearedFields[user.FieldPhone]
	return ok
}

// ResetPhone resets all changes to the "phone" field.
func (m *UserMutation) ResetPhone() {
	m.phone = nil
	delete(m.clearedFields, user.FieldPhone)
}

// SetLastLoginIP sets the "last_login_ip" field.
func (m *UserMutation) SetLastLoginIP(s string) {
	m.last_login_ip = &s
}

// LastLoginIP returns the value of the "last_login_ip" field in the mutation.
func (m *UserMutation) LastLoginIP() (r string, exists bool) {
	v := m.last_login_ip
	if v == nil {
		return
	}
	return *v, true
}

// OldLastLoginIP returns the old "last_login_ip" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLastLoginIP(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastLoginIP is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastLoginIP requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastLoginIP: %w", err)
	}
	return oldValue.LastLoginIP, nil
}

// ClearLastLoginIP clears the value of the "last_login_ip" field.
func (m *UserMutation) ClearLastLoginIP() {
	m.last_login_ip = nil
	m.clearedFields[user.FieldLastLoginIP] = struct{}{}
}

// LastLoginIPCleared returns if the "last_login_ip" field was cleared in this mutation.
func (m *UserMutation) LastLoginIPCleared() bool {
	_, ok := m.clearedFields[user.FieldLastLoginIP]
	return ok
}

// ResetLastLoginIP resets all changes to the "last_login_ip" field.
func (m *UserMutation) ResetLastLoginIP() {
	m.last_login_ip = nil
	delete(m.clearedFields, user.FieldLastLoginIP)
}

// SetLastLoginTime sets the "last_login_time" field.
func (m *UserMutation) SetLastLoginTime(t time.Time) {
	m.last_login_time = &t
}

// LastLoginTime returns the value of the "last_login_time" field in the mutation.
func (m *UserMutation) LastLoginTime() (r time.Time, exists bool) {
	v := m.last_login_time
	if v == nil {
		return
	}
	return *v, true
}

// OldLastLoginTime returns the old "last_login_time" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLastLoginTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastLoginTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastLoginTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastLoginTime: %w", err)
	}
	return oldValue.LastLoginTime, nil
}

// ClearLastLoginTime clears the value of the "last_login_time" field.
func (m *UserMutation) ClearLastLoginTime() {
	m.last_login_time = nil
	m.clearedFields[user.FieldLastLoginTime] = struct{}{}
}

// LastLoginTimeCleared returns if the "last_login_time" field was cleared in this mutation.
func (m *UserMutation) LastLoginTimeCleared() bool {
	_, ok := m.clearedFields[user.FieldLastLoginTime]
	return ok
}

// ResetLastLoginTime resets all changes to the "last_login_time" field.
func (m *UserMutation) ResetLastLoginTime() {
	m.last_login_time = nil
	delete(m.clearedFields, user.FieldLastLoginTime)
}

// AddGroupIDs adds the "groups" edge to the Group entity by ids.
func (m *UserMutation) AddGroupIDs(ids ...int) {
	if m.groups == nil {
		m.groups = make(map[int]struct{})
	}
	for i := range ids {
		m.groups[ids[i]] = struct{}{}
	}
}

// ClearGroups clears the "groups" edge to the Group entity.
func (m *UserMutation) ClearGroups() {
	m.clearedgroups = true
}

// GroupsCleared reports if the "groups" edge to the Group entity was cleared.
func (m *UserMutation) GroupsCleared() bool {
	return m.clearedgroups
}

// RemoveGroupIDs removes the "groups" edge to the Group entity by IDs.
func (m *UserMutation) RemoveGroupIDs(ids ...int) {
	if m.removedgroups == nil {
		m.removedgroups = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.groups, ids[i])
		m.removedgroups[ids[i]] = struct{}{}
	}
}

// RemovedGroups returns the removed IDs of the "groups" edge to the Group entity.
func (m *UserMutation) RemovedGroupsIDs() (ids []int) {
	for id := range m.removedgroups {
		ids = append(ids, id)
	}
	return
}

// GroupsIDs returns the "groups" edge IDs in the mutation.
func (m *UserMutation) GroupsIDs() (ids []int) {
	for id := range m.groups {
		ids = append(ids, id)
	}
	return
}

// ResetGroups resets all changes to the "groups" edge.
func (m *UserMutation) ResetGroups() {
	m.groups = nil
	m.clearedgroups = false
	m.removedgroups = nil
}

// AddAdminIDs adds the "admins" edge to the Group entity by ids.
func (m *UserMutation) AddAdminIDs(ids ...int) {
	if m.admins == nil {
		m.admins = make(map[int]struct{})
	}
	for i := range ids {
		m.admins[ids[i]] = struct{}{}
	}
}

// ClearAdmins clears the "admins" edge to the Group entity.
func (m *UserMutation) ClearAdmins() {
	m.clearedadmins = true
}

// AdminsCleared reports if the "admins" edge to the Group entity was cleared.
func (m *UserMutation) AdminsCleared() bool {
	return m.clearedadmins
}

// RemoveAdminIDs removes the "admins" edge to the Group entity by IDs.
func (m *UserMutation) RemoveAdminIDs(ids ...int) {
	if m.removedadmins == nil {
		m.removedadmins = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.admins, ids[i])
		m.removedadmins[ids[i]] = struct{}{}
	}
}

// RemovedAdmins returns the removed IDs of the "admins" edge to the Group entity.
func (m *UserMutation) RemovedAdminsIDs() (ids []int) {
	for id := range m.removedadmins {
		ids = append(ids, id)
	}
	return
}

// AdminsIDs returns the "admins" edge IDs in the mutation.
func (m *UserMutation) AdminsIDs() (ids []int) {
	for id := range m.admins {
		ids = append(ids, id)
	}
	return
}

// ResetAdmins resets all changes to the "admins" edge.
func (m *UserMutation) ResetAdmins() {
	m.admins = nil
	m.clearedadmins = false
	m.removedadmins = nil
}

// AddPersonChargeIDs adds the "person_charges" edge to the OrganizationPosition entity by ids.
func (m *UserMutation) AddPersonChargeIDs(ids ...int) {
	if m.person_charges == nil {
		m.person_charges = make(map[int]struct{})
	}
	for i := range ids {
		m.person_charges[ids[i]] = struct{}{}
	}
}

// ClearPersonCharges clears the "person_charges" edge to the OrganizationPosition entity.
func (m *UserMutation) ClearPersonCharges() {
	m.clearedperson_charges = true
}

// PersonChargesCleared reports if the "person_charges" edge to the OrganizationPosition entity was cleared.
func (m *UserMutation) PersonChargesCleared() bool {
	return m.clearedperson_charges
}

// RemovePersonChargeIDs removes the "person_charges" edge to the OrganizationPosition entity by IDs.
func (m *UserMutation) RemovePersonChargeIDs(ids ...int) {
	if m.removedperson_charges == nil {
		m.removedperson_charges = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.person_charges, ids[i])
		m.removedperson_charges[ids[i]] = struct{}{}
	}
}

// RemovedPersonCharges returns the removed IDs of the "person_charges" edge to the OrganizationPosition entity.
func (m *UserMutation) RemovedPersonChargesIDs() (ids []int) {
	for id := range m.removedperson_charges {
		ids = append(ids, id)
	}
	return
}

// PersonChargesIDs returns the "person_charges" edge IDs in the mutation.
func (m *UserMutation) PersonChargesIDs() (ids []int) {
	for id := range m.person_charges {
		ids = append(ids, id)
	}
	return
}

// ResetPersonCharges resets all changes to the "person_charges" edge.
func (m *UserMutation) ResetPersonCharges() {
	m.person_charges = nil
	m.clearedperson_charges = false
	m.removedperson_charges = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.create_time != nil {
		fields = append(fields, user.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, user.FieldUpdateTime)
	}
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.passwd != nil {
		fields = append(fields, user.FieldPasswd)
	}
	if m.phone != nil {
		fields = append(fields, user.FieldPhone)
	}
	if m.last_login_ip != nil {
		fields = append(fields, user.FieldLastLoginIP)
	}
	if m.last_login_time != nil {
		fields = append(fields, user.FieldLastLoginTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldCreateTime:
		return m.CreateTime()
	case user.FieldUpdateTime:
		return m.UpdateTime()
	case user.FieldName:
		return m.Name()
	case user.FieldPasswd:
		return m.Passwd()
	case user.FieldPhone:
		return m.Phone()
	case user.FieldLastLoginIP:
		return m.LastLoginIP()
	case user.FieldLastLoginTime:
		return m.LastLoginTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case user.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldPasswd:
		return m.OldPasswd(ctx)
	case user.FieldPhone:
		return m.OldPhone(ctx)
	case user.FieldLastLoginIP:
		return m.OldLastLoginIP(ctx)
	case user.FieldLastLoginTime:
		return m.OldLastLoginTime(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case user.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldPasswd:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPasswd(v)
		return nil
	case user.FieldPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhone(v)
		return nil
	case user.FieldLastLoginIP:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastLoginIP(v)
		return nil
	case user.FieldLastLoginTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastLoginTime(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldPhone) {
		fields = append(fields, user.FieldPhone)
	}
	if m.FieldCleared(user.FieldLastLoginIP) {
		fields = append(fields, user.FieldLastLoginIP)
	}
	if m.FieldCleared(user.FieldLastLoginTime) {
		fields = append(fields, user.FieldLastLoginTime)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldPhone:
		m.ClearPhone()
		return nil
	case user.FieldLastLoginIP:
		m.ClearLastLoginIP()
		return nil
	case user.FieldLastLoginTime:
		m.ClearLastLoginTime()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case user.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldPasswd:
		m.ResetPasswd()
		return nil
	case user.FieldPhone:
		m.ResetPhone()
		return nil
	case user.FieldLastLoginIP:
		m.ResetLastLoginIP()
		return nil
	case user.FieldLastLoginTime:
		m.ResetLastLoginTime()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.groups != nil {
		edges = append(edges, user.EdgeGroups)
	}
	if m.admins != nil {
		edges = append(edges, user.EdgeAdmins)
	}
	if m.person_charges != nil {
		edges = append(edges, user.EdgePersonCharges)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeGroups:
		ids := make([]ent.Value, 0, len(m.groups))
		for id := range m.groups {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeAdmins:
		ids := make([]ent.Value, 0, len(m.admins))
		for id := range m.admins {
			ids = append(ids, id)
		}
		return ids
	case user.EdgePersonCharges:
		ids := make([]ent.Value, 0, len(m.person_charges))
		for id := range m.person_charges {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedgroups != nil {
		edges = append(edges, user.EdgeGroups)
	}
	if m.removedadmins != nil {
		edges = append(edges, user.EdgeAdmins)
	}
	if m.removedperson_charges != nil {
		edges = append(edges, user.EdgePersonCharges)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeGroups:
		ids := make([]ent.Value, 0, len(m.removedgroups))
		for id := range m.removedgroups {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeAdmins:
		ids := make([]ent.Value, 0, len(m.removedadmins))
		for id := range m.removedadmins {
			ids = append(ids, id)
		}
		return ids
	case user.EdgePersonCharges:
		ids := make([]ent.Value, 0, len(m.removedperson_charges))
		for id := range m.removedperson_charges {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedgroups {
		edges = append(edges, user.EdgeGroups)
	}
	if m.clearedadmins {
		edges = append(edges, user.EdgeAdmins)
	}
	if m.clearedperson_charges {
		edges = append(edges, user.EdgePersonCharges)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeGroups:
		return m.clearedgroups
	case user.EdgeAdmins:
		return m.clearedadmins
	case user.EdgePersonCharges:
		return m.clearedperson_charges
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeGroups:
		m.ResetGroups()
		return nil
	case user.EdgeAdmins:
		m.ResetAdmins()
		return nil
	case user.EdgePersonCharges:
		m.ResetPersonCharges()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
