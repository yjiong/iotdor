// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/yjiong/iotdor/ent/device"
	"github.com/yjiong/iotdor/ent/gateway"
	"github.com/yjiong/iotdor/ent/organization"
)

// Device is the model entity for the Device schema.
type Device struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// DevID holds the value of the "devID" field.
	DevID string `json:"devID,omitempty"`
	// DevType holds the value of the "devType" field.
	DevType string `json:"devType,omitempty"`
	// DevAddr holds the value of the "devAddr" field.
	DevAddr string `json:"devAddr,omitempty"`
	// Conn holds the value of the "conn" field.
	Conn string `json:"conn,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// DeleteFlag holds the value of the "deleteFlag" field.
	DeleteFlag bool `json:"deleteFlag,omitempty"`
	// Summary holds the value of the "summary" field.
	Summary string `json:"summary,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DeviceQuery when eager-loading is set.
	Edges                DeviceEdges `json:"edges"`
	gateway_devices      *int
	organization_devices *int
}

// DeviceEdges holds the relations/edges for other nodes in the graph.
type DeviceEdges struct {
	// Organization holds the value of the Organization edge.
	Organization *Organization `json:"Organization,omitempty"`
	// Gateway holds the value of the gateway edge.
	Gateway *Gateway `json:"gateway,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// OrganizationOrErr returns the Organization value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeviceEdges) OrganizationOrErr() (*Organization, error) {
	if e.loadedTypes[0] {
		if e.Organization == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: organization.Label}
		}
		return e.Organization, nil
	}
	return nil, &NotLoadedError{edge: "Organization"}
}

// GatewayOrErr returns the Gateway value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeviceEdges) GatewayOrErr() (*Gateway, error) {
	if e.loadedTypes[1] {
		if e.Gateway == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: gateway.Label}
		}
		return e.Gateway, nil
	}
	return nil, &NotLoadedError{edge: "gateway"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Device) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case device.FieldDeleteFlag:
			values[i] = new(sql.NullBool)
		case device.FieldID:
			values[i] = new(sql.NullInt64)
		case device.FieldDevID, device.FieldDevType, device.FieldDevAddr, device.FieldConn, device.FieldName, device.FieldSummary:
			values[i] = new(sql.NullString)
		case device.FieldCreateTime, device.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case device.ForeignKeys[0]: // gateway_devices
			values[i] = new(sql.NullInt64)
		case device.ForeignKeys[1]: // organization_devices
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Device", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Device fields.
func (d *Device) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case device.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			d.ID = int(value.Int64)
		case device.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				d.CreateTime = value.Time
			}
		case device.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				d.UpdateTime = value.Time
			}
		case device.FieldDevID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field devID", values[i])
			} else if value.Valid {
				d.DevID = value.String
			}
		case device.FieldDevType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field devType", values[i])
			} else if value.Valid {
				d.DevType = value.String
			}
		case device.FieldDevAddr:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field devAddr", values[i])
			} else if value.Valid {
				d.DevAddr = value.String
			}
		case device.FieldConn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field conn", values[i])
			} else if value.Valid {
				d.Conn = value.String
			}
		case device.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				d.Name = value.String
			}
		case device.FieldDeleteFlag:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field deleteFlag", values[i])
			} else if value.Valid {
				d.DeleteFlag = value.Bool
			}
		case device.FieldSummary:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field summary", values[i])
			} else if value.Valid {
				d.Summary = value.String
			}
		case device.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field gateway_devices", value)
			} else if value.Valid {
				d.gateway_devices = new(int)
				*d.gateway_devices = int(value.Int64)
			}
		case device.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field organization_devices", value)
			} else if value.Valid {
				d.organization_devices = new(int)
				*d.organization_devices = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryOrganization queries the "Organization" edge of the Device entity.
func (d *Device) QueryOrganization() *OrganizationQuery {
	return (&DeviceClient{config: d.config}).QueryOrganization(d)
}

// QueryGateway queries the "gateway" edge of the Device entity.
func (d *Device) QueryGateway() *GatewayQuery {
	return (&DeviceClient{config: d.config}).QueryGateway(d)
}

// Update returns a builder for updating this Device.
// Note that you need to call Device.Unwrap() before calling this method if this Device
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Device) Update() *DeviceUpdateOne {
	return (&DeviceClient{config: d.config}).UpdateOne(d)
}

// Unwrap unwraps the Device entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Device) Unwrap() *Device {
	_tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Device is not a transactional entity")
	}
	d.config.driver = _tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Device) String() string {
	var builder strings.Builder
	builder.WriteString("Device(")
	builder.WriteString(fmt.Sprintf("id=%v, ", d.ID))
	builder.WriteString("create_time=")
	builder.WriteString(d.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(d.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("devID=")
	builder.WriteString(d.DevID)
	builder.WriteString(", ")
	builder.WriteString("devType=")
	builder.WriteString(d.DevType)
	builder.WriteString(", ")
	builder.WriteString("devAddr=")
	builder.WriteString(d.DevAddr)
	builder.WriteString(", ")
	builder.WriteString("conn=")
	builder.WriteString(d.Conn)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(d.Name)
	builder.WriteString(", ")
	builder.WriteString("deleteFlag=")
	builder.WriteString(fmt.Sprintf("%v", d.DeleteFlag))
	builder.WriteString(", ")
	builder.WriteString("summary=")
	builder.WriteString(d.Summary)
	builder.WriteByte(')')
	return builder.String()
}

// Devices is a parsable slice of Device.
type Devices []*Device

func (d Devices) config(cfg config) {
	for _i := range d {
		d[_i].config = cfg
	}
}
