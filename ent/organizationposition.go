// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/yjiong/iotdor/ent/organizationposition"
)

// OrganizationPosition is the model entity for the OrganizationPosition schema.
type OrganizationPosition struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// PositionID holds the value of the "position_id" field.
	PositionID string `json:"position_id,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// Floor holds the value of the "floor" field.
	Floor string `json:"floor,omitempty"`
	// UnitNo holds the value of the "unitNo" field.
	UnitNo string `json:"unitNo,omitempty"`
	// LongitudeAndLatitude holds the value of the "longitude_and_latitude" field.
	LongitudeAndLatitude string `json:"longitude_and_latitude,omitempty"`
	// Summary holds the value of the "summary" field.
	Summary string `json:"summary,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrganizationPositionQuery when eager-loading is set.
	Edges OrganizationPositionEdges `json:"edges"`
}

// OrganizationPositionEdges holds the relations/edges for other nodes in the graph.
type OrganizationPositionEdges struct {
	// Devices holds the value of the devices edge.
	Devices []*Device `json:"devices,omitempty"`
	// PersonCharges holds the value of the person_charges edge.
	PersonCharges []*User `json:"person_charges,omitempty"`
	// OrganizationTree holds the value of the organization_tree edge.
	OrganizationTree []*OrganizationTree `json:"organization_tree,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// DevicesOrErr returns the Devices value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationPositionEdges) DevicesOrErr() ([]*Device, error) {
	if e.loadedTypes[0] {
		return e.Devices, nil
	}
	return nil, &NotLoadedError{edge: "devices"}
}

// PersonChargesOrErr returns the PersonCharges value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationPositionEdges) PersonChargesOrErr() ([]*User, error) {
	if e.loadedTypes[1] {
		return e.PersonCharges, nil
	}
	return nil, &NotLoadedError{edge: "person_charges"}
}

// OrganizationTreeOrErr returns the OrganizationTree value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationPositionEdges) OrganizationTreeOrErr() ([]*OrganizationTree, error) {
	if e.loadedTypes[2] {
		return e.OrganizationTree, nil
	}
	return nil, &NotLoadedError{edge: "organization_tree"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrganizationPosition) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case organizationposition.FieldID:
			values[i] = new(sql.NullInt64)
		case organizationposition.FieldPositionID, organizationposition.FieldAddress, organizationposition.FieldFloor, organizationposition.FieldUnitNo, organizationposition.FieldLongitudeAndLatitude, organizationposition.FieldSummary:
			values[i] = new(sql.NullString)
		case organizationposition.FieldCreateTime, organizationposition.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type OrganizationPosition", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrganizationPosition fields.
func (op *OrganizationPosition) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case organizationposition.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			op.ID = int(value.Int64)
		case organizationposition.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				op.CreateTime = value.Time
			}
		case organizationposition.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				op.UpdateTime = value.Time
			}
		case organizationposition.FieldPositionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field position_id", values[i])
			} else if value.Valid {
				op.PositionID = value.String
			}
		case organizationposition.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				op.Address = value.String
			}
		case organizationposition.FieldFloor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field floor", values[i])
			} else if value.Valid {
				op.Floor = value.String
			}
		case organizationposition.FieldUnitNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field unitNo", values[i])
			} else if value.Valid {
				op.UnitNo = value.String
			}
		case organizationposition.FieldLongitudeAndLatitude:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field longitude_and_latitude", values[i])
			} else if value.Valid {
				op.LongitudeAndLatitude = value.String
			}
		case organizationposition.FieldSummary:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field summary", values[i])
			} else if value.Valid {
				op.Summary = value.String
			}
		}
	}
	return nil
}

// QueryDevices queries the "devices" edge of the OrganizationPosition entity.
func (op *OrganizationPosition) QueryDevices() *DeviceQuery {
	return (&OrganizationPositionClient{config: op.config}).QueryDevices(op)
}

// QueryPersonCharges queries the "person_charges" edge of the OrganizationPosition entity.
func (op *OrganizationPosition) QueryPersonCharges() *UserQuery {
	return (&OrganizationPositionClient{config: op.config}).QueryPersonCharges(op)
}

// QueryOrganizationTree queries the "organization_tree" edge of the OrganizationPosition entity.
func (op *OrganizationPosition) QueryOrganizationTree() *OrganizationTreeQuery {
	return (&OrganizationPositionClient{config: op.config}).QueryOrganizationTree(op)
}

// Update returns a builder for updating this OrganizationPosition.
// Note that you need to call OrganizationPosition.Unwrap() before calling this method if this OrganizationPosition
// was returned from a transaction, and the transaction was committed or rolled back.
func (op *OrganizationPosition) Update() *OrganizationPositionUpdateOne {
	return (&OrganizationPositionClient{config: op.config}).UpdateOne(op)
}

// Unwrap unwraps the OrganizationPosition entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (op *OrganizationPosition) Unwrap() *OrganizationPosition {
	_tx, ok := op.config.driver.(*txDriver)
	if !ok {
		panic("ent: OrganizationPosition is not a transactional entity")
	}
	op.config.driver = _tx.drv
	return op
}

// String implements the fmt.Stringer.
func (op *OrganizationPosition) String() string {
	var builder strings.Builder
	builder.WriteString("OrganizationPosition(")
	builder.WriteString(fmt.Sprintf("id=%v, ", op.ID))
	builder.WriteString("create_time=")
	builder.WriteString(op.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(op.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("position_id=")
	builder.WriteString(op.PositionID)
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(op.Address)
	builder.WriteString(", ")
	builder.WriteString("floor=")
	builder.WriteString(op.Floor)
	builder.WriteString(", ")
	builder.WriteString("unitNo=")
	builder.WriteString(op.UnitNo)
	builder.WriteString(", ")
	builder.WriteString("longitude_and_latitude=")
	builder.WriteString(op.LongitudeAndLatitude)
	builder.WriteString(", ")
	builder.WriteString("summary=")
	builder.WriteString(op.Summary)
	builder.WriteByte(')')
	return builder.String()
}

// OrganizationPositions is a parsable slice of OrganizationPosition.
type OrganizationPositions []*OrganizationPosition

func (op OrganizationPositions) config(cfg config) {
	for _i := range op {
		op[_i].config = cfg
	}
}
