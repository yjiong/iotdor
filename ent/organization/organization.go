// Code generated by ent, DO NOT EDIT.

package organization

import (
	"time"
)

const (
	// Label holds the string label denoting the organization type in the database.
	Label = "organization"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldFloor holds the string denoting the floor field in the database.
	FieldFloor = "floor"
	// FieldUnitNo holds the string denoting the unitno field in the database.
	FieldUnitNo = "unit_no"
	// FieldLongitudeAndLatituude holds the string denoting the longitudeandlatituude field in the database.
	FieldLongitudeAndLatituude = "longitude_and_latituude"
	// FieldPersonCharge holds the string denoting the personcharge field in the database.
	FieldPersonCharge = "person_charge"
	// FieldSummary holds the string denoting the summary field in the database.
	FieldSummary = "summary"
	// EdgeDevices holds the string denoting the devices edge name in mutations.
	EdgeDevices = "devices"
	// Table holds the table name of the organization in the database.
	Table = "organizations"
	// DevicesTable is the table that holds the devices relation/edge.
	DevicesTable = "devices"
	// DevicesInverseTable is the table name for the Device entity.
	// It exists in this package in order to avoid circular dependency with the "device" package.
	DevicesInverseTable = "devices"
	// DevicesColumn is the table column denoting the devices relation/edge.
	DevicesColumn = "organization_devices"
)

// Columns holds all SQL columns for organization fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldName,
	FieldAddress,
	FieldFloor,
	FieldUnitNo,
	FieldLongitudeAndLatituude,
	FieldPersonCharge,
	FieldSummary,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
)
