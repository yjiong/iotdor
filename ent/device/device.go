// Code generated by entc, DO NOT EDIT.

package device

import (
	"time"
)

const (
	// Label holds the string label denoting the device type in the database.
	Label = "device"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldDevID holds the string denoting the devid field in the database.
	FieldDevID = "dev_id"
	// FieldDevType holds the string denoting the devtype field in the database.
	FieldDevType = "dev_type"
	// FieldDevAddr holds the string denoting the devaddr field in the database.
	FieldDevAddr = "dev_addr"
	// FieldConn holds the string denoting the conn field in the database.
	FieldConn = "conn"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDeleteFlag holds the string denoting the deleteflag field in the database.
	FieldDeleteFlag = "delete_flag"
	// EdgeGateway holds the string denoting the gateway edge name in mutations.
	EdgeGateway = "gateway"
	// Table holds the table name of the device in the database.
	Table = "devices"
	// GatewayTable is the table that holds the gateway relation/edge.
	GatewayTable = "devices"
	// GatewayInverseTable is the table name for the Gateway entity.
	// It exists in this package in order to avoid circular dependency with the "gateway" package.
	GatewayInverseTable = "gateways"
	// GatewayColumn is the table column denoting the gateway relation/edge.
	GatewayColumn = "gateway_devices"
)

// Columns holds all SQL columns for device fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldDevID,
	FieldDevType,
	FieldDevAddr,
	FieldConn,
	FieldName,
	FieldDeleteFlag,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "devices"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"gateway_devices",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
)
