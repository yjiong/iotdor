// Code generated by ent, DO NOT EDIT.

package organizationtree

import (
	"time"
)

const (
	// Label holds the string label denoting the organizationtree type in the database.
	Label = "organization_tree"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldParentID holds the string denoting the parent_id field in the database.
	FieldParentID = "parent_id"
	// FieldLeft holds the string denoting the left field in the database.
	FieldLeft = "left"
	// FieldRight holds the string denoting the right field in the database.
	FieldRight = "right"
	// FieldLevel holds the string denoting the level field in the database.
	FieldLevel = "level"
	// EdgeOrganizationPositions holds the string denoting the organization_positions edge name in mutations.
	EdgeOrganizationPositions = "organization_positions"
	// Table holds the table name of the organizationtree in the database.
	Table = "organization_trees"
	// OrganizationPositionsTable is the table that holds the organization_positions relation/edge.
	OrganizationPositionsTable = "organization_trees"
	// OrganizationPositionsInverseTable is the table name for the OrganizationPosition entity.
	// It exists in this package in order to avoid circular dependency with the "organizationposition" package.
	OrganizationPositionsInverseTable = "organization_positions"
	// OrganizationPositionsColumn is the table column denoting the organization_positions relation/edge.
	OrganizationPositionsColumn = "organization_tree_organization_positions"
)

// Columns holds all SQL columns for organizationtree fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldName,
	FieldParentID,
	FieldLeft,
	FieldRight,
	FieldLevel,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "organization_trees"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"organization_tree_organization_positions",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
)
