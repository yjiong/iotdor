// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/yjiong/iotdor/ent/migrate"

	"github.com/yjiong/iotdor/ent/device"
	"github.com/yjiong/iotdor/ent/gateway"
	"github.com/yjiong/iotdor/ent/group"
	"github.com/yjiong/iotdor/ent/organizationposition"
	"github.com/yjiong/iotdor/ent/organizationtree"
	"github.com/yjiong/iotdor/ent/user"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Device is the client for interacting with the Device builders.
	Device *DeviceClient
	// Gateway is the client for interacting with the Gateway builders.
	Gateway *GatewayClient
	// Group is the client for interacting with the Group builders.
	Group *GroupClient
	// OrganizationPosition is the client for interacting with the OrganizationPosition builders.
	OrganizationPosition *OrganizationPositionClient
	// OrganizationTree is the client for interacting with the OrganizationTree builders.
	OrganizationTree *OrganizationTreeClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Device = NewDeviceClient(c.config)
	c.Gateway = NewGatewayClient(c.config)
	c.Group = NewGroupClient(c.config)
	c.OrganizationPosition = NewOrganizationPositionClient(c.config)
	c.OrganizationTree = NewOrganizationTreeClient(c.config)
	c.User = NewUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                  ctx,
		config:               cfg,
		Device:               NewDeviceClient(cfg),
		Gateway:              NewGatewayClient(cfg),
		Group:                NewGroupClient(cfg),
		OrganizationPosition: NewOrganizationPositionClient(cfg),
		OrganizationTree:     NewOrganizationTreeClient(cfg),
		User:                 NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                  ctx,
		config:               cfg,
		Device:               NewDeviceClient(cfg),
		Gateway:              NewGatewayClient(cfg),
		Group:                NewGroupClient(cfg),
		OrganizationPosition: NewOrganizationPositionClient(cfg),
		OrganizationTree:     NewOrganizationTreeClient(cfg),
		User:                 NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Device.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Device.Use(hooks...)
	c.Gateway.Use(hooks...)
	c.Group.Use(hooks...)
	c.OrganizationPosition.Use(hooks...)
	c.OrganizationTree.Use(hooks...)
	c.User.Use(hooks...)
}

// DeviceClient is a client for the Device schema.
type DeviceClient struct {
	config
}

// NewDeviceClient returns a client for the Device from the given config.
func NewDeviceClient(c config) *DeviceClient {
	return &DeviceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `device.Hooks(f(g(h())))`.
func (c *DeviceClient) Use(hooks ...Hook) {
	c.hooks.Device = append(c.hooks.Device, hooks...)
}

// Create returns a builder for creating a Device entity.
func (c *DeviceClient) Create() *DeviceCreate {
	mutation := newDeviceMutation(c.config, OpCreate)
	return &DeviceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Device entities.
func (c *DeviceClient) CreateBulk(builders ...*DeviceCreate) *DeviceCreateBulk {
	return &DeviceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Device.
func (c *DeviceClient) Update() *DeviceUpdate {
	mutation := newDeviceMutation(c.config, OpUpdate)
	return &DeviceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DeviceClient) UpdateOne(d *Device) *DeviceUpdateOne {
	mutation := newDeviceMutation(c.config, OpUpdateOne, withDevice(d))
	return &DeviceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DeviceClient) UpdateOneID(id int) *DeviceUpdateOne {
	mutation := newDeviceMutation(c.config, OpUpdateOne, withDeviceID(id))
	return &DeviceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Device.
func (c *DeviceClient) Delete() *DeviceDelete {
	mutation := newDeviceMutation(c.config, OpDelete)
	return &DeviceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DeviceClient) DeleteOne(d *Device) *DeviceDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *DeviceClient) DeleteOneID(id int) *DeviceDeleteOne {
	builder := c.Delete().Where(device.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DeviceDeleteOne{builder}
}

// Query returns a query builder for Device.
func (c *DeviceClient) Query() *DeviceQuery {
	return &DeviceQuery{
		config: c.config,
	}
}

// Get returns a Device entity by its id.
func (c *DeviceClient) Get(ctx context.Context, id int) (*Device, error) {
	return c.Query().Where(device.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DeviceClient) GetX(ctx context.Context, id int) *Device {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrganizationPosition queries the organization_position edge of a Device.
func (c *DeviceClient) QueryOrganizationPosition(d *Device) *OrganizationPositionQuery {
	query := &OrganizationPositionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(device.Table, device.FieldID, id),
			sqlgraph.To(organizationposition.Table, organizationposition.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, device.OrganizationPositionTable, device.OrganizationPositionColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGateway queries the gateway edge of a Device.
func (c *DeviceClient) QueryGateway(d *Device) *GatewayQuery {
	query := &GatewayQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(device.Table, device.FieldID, id),
			sqlgraph.To(gateway.Table, gateway.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, device.GatewayTable, device.GatewayColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DeviceClient) Hooks() []Hook {
	return c.hooks.Device
}

// GatewayClient is a client for the Gateway schema.
type GatewayClient struct {
	config
}

// NewGatewayClient returns a client for the Gateway from the given config.
func NewGatewayClient(c config) *GatewayClient {
	return &GatewayClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `gateway.Hooks(f(g(h())))`.
func (c *GatewayClient) Use(hooks ...Hook) {
	c.hooks.Gateway = append(c.hooks.Gateway, hooks...)
}

// Create returns a builder for creating a Gateway entity.
func (c *GatewayClient) Create() *GatewayCreate {
	mutation := newGatewayMutation(c.config, OpCreate)
	return &GatewayCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Gateway entities.
func (c *GatewayClient) CreateBulk(builders ...*GatewayCreate) *GatewayCreateBulk {
	return &GatewayCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Gateway.
func (c *GatewayClient) Update() *GatewayUpdate {
	mutation := newGatewayMutation(c.config, OpUpdate)
	return &GatewayUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GatewayClient) UpdateOne(ga *Gateway) *GatewayUpdateOne {
	mutation := newGatewayMutation(c.config, OpUpdateOne, withGateway(ga))
	return &GatewayUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GatewayClient) UpdateOneID(id int) *GatewayUpdateOne {
	mutation := newGatewayMutation(c.config, OpUpdateOne, withGatewayID(id))
	return &GatewayUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Gateway.
func (c *GatewayClient) Delete() *GatewayDelete {
	mutation := newGatewayMutation(c.config, OpDelete)
	return &GatewayDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GatewayClient) DeleteOne(ga *Gateway) *GatewayDeleteOne {
	return c.DeleteOneID(ga.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *GatewayClient) DeleteOneID(id int) *GatewayDeleteOne {
	builder := c.Delete().Where(gateway.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GatewayDeleteOne{builder}
}

// Query returns a query builder for Gateway.
func (c *GatewayClient) Query() *GatewayQuery {
	return &GatewayQuery{
		config: c.config,
	}
}

// Get returns a Gateway entity by its id.
func (c *GatewayClient) Get(ctx context.Context, id int) (*Gateway, error) {
	return c.Query().Where(gateway.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GatewayClient) GetX(ctx context.Context, id int) *Gateway {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDevices queries the devices edge of a Gateway.
func (c *GatewayClient) QueryDevices(ga *Gateway) *DeviceQuery {
	query := &DeviceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ga.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(gateway.Table, gateway.FieldID, id),
			sqlgraph.To(device.Table, device.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, gateway.DevicesTable, gateway.DevicesColumn),
		)
		fromV = sqlgraph.Neighbors(ga.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGroup queries the group edge of a Gateway.
func (c *GatewayClient) QueryGroup(ga *Gateway) *GroupQuery {
	query := &GroupQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ga.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(gateway.Table, gateway.FieldID, id),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, gateway.GroupTable, gateway.GroupColumn),
		)
		fromV = sqlgraph.Neighbors(ga.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GatewayClient) Hooks() []Hook {
	return c.hooks.Gateway
}

// GroupClient is a client for the Group schema.
type GroupClient struct {
	config
}

// NewGroupClient returns a client for the Group from the given config.
func NewGroupClient(c config) *GroupClient {
	return &GroupClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `group.Hooks(f(g(h())))`.
func (c *GroupClient) Use(hooks ...Hook) {
	c.hooks.Group = append(c.hooks.Group, hooks...)
}

// Create returns a builder for creating a Group entity.
func (c *GroupClient) Create() *GroupCreate {
	mutation := newGroupMutation(c.config, OpCreate)
	return &GroupCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Group entities.
func (c *GroupClient) CreateBulk(builders ...*GroupCreate) *GroupCreateBulk {
	return &GroupCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Group.
func (c *GroupClient) Update() *GroupUpdate {
	mutation := newGroupMutation(c.config, OpUpdate)
	return &GroupUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GroupClient) UpdateOne(gr *Group) *GroupUpdateOne {
	mutation := newGroupMutation(c.config, OpUpdateOne, withGroup(gr))
	return &GroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GroupClient) UpdateOneID(id int) *GroupUpdateOne {
	mutation := newGroupMutation(c.config, OpUpdateOne, withGroupID(id))
	return &GroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Group.
func (c *GroupClient) Delete() *GroupDelete {
	mutation := newGroupMutation(c.config, OpDelete)
	return &GroupDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GroupClient) DeleteOne(gr *Group) *GroupDeleteOne {
	return c.DeleteOneID(gr.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *GroupClient) DeleteOneID(id int) *GroupDeleteOne {
	builder := c.Delete().Where(group.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GroupDeleteOne{builder}
}

// Query returns a query builder for Group.
func (c *GroupClient) Query() *GroupQuery {
	return &GroupQuery{
		config: c.config,
	}
}

// Get returns a Group entity by its id.
func (c *GroupClient) Get(ctx context.Context, id int) (*Group, error) {
	return c.Query().Where(group.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GroupClient) GetX(ctx context.Context, id int) *Group {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUsers queries the users edge of a Group.
func (c *GroupClient) QueryUsers(gr *Group) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := gr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(group.Table, group.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, group.UsersTable, group.UsersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(gr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAdmins queries the admins edge of a Group.
func (c *GroupClient) QueryAdmins(gr *Group) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := gr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(group.Table, group.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, group.AdminsTable, group.AdminsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(gr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGateways queries the gateways edge of a Group.
func (c *GroupClient) QueryGateways(gr *Group) *GatewayQuery {
	query := &GatewayQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := gr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(group.Table, group.FieldID, id),
			sqlgraph.To(gateway.Table, gateway.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, group.GatewaysTable, group.GatewaysColumn),
		)
		fromV = sqlgraph.Neighbors(gr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GroupClient) Hooks() []Hook {
	return c.hooks.Group
}

// OrganizationPositionClient is a client for the OrganizationPosition schema.
type OrganizationPositionClient struct {
	config
}

// NewOrganizationPositionClient returns a client for the OrganizationPosition from the given config.
func NewOrganizationPositionClient(c config) *OrganizationPositionClient {
	return &OrganizationPositionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `organizationposition.Hooks(f(g(h())))`.
func (c *OrganizationPositionClient) Use(hooks ...Hook) {
	c.hooks.OrganizationPosition = append(c.hooks.OrganizationPosition, hooks...)
}

// Create returns a builder for creating a OrganizationPosition entity.
func (c *OrganizationPositionClient) Create() *OrganizationPositionCreate {
	mutation := newOrganizationPositionMutation(c.config, OpCreate)
	return &OrganizationPositionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrganizationPosition entities.
func (c *OrganizationPositionClient) CreateBulk(builders ...*OrganizationPositionCreate) *OrganizationPositionCreateBulk {
	return &OrganizationPositionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrganizationPosition.
func (c *OrganizationPositionClient) Update() *OrganizationPositionUpdate {
	mutation := newOrganizationPositionMutation(c.config, OpUpdate)
	return &OrganizationPositionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrganizationPositionClient) UpdateOne(op *OrganizationPosition) *OrganizationPositionUpdateOne {
	mutation := newOrganizationPositionMutation(c.config, OpUpdateOne, withOrganizationPosition(op))
	return &OrganizationPositionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrganizationPositionClient) UpdateOneID(id int) *OrganizationPositionUpdateOne {
	mutation := newOrganizationPositionMutation(c.config, OpUpdateOne, withOrganizationPositionID(id))
	return &OrganizationPositionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrganizationPosition.
func (c *OrganizationPositionClient) Delete() *OrganizationPositionDelete {
	mutation := newOrganizationPositionMutation(c.config, OpDelete)
	return &OrganizationPositionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrganizationPositionClient) DeleteOne(op *OrganizationPosition) *OrganizationPositionDeleteOne {
	return c.DeleteOneID(op.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *OrganizationPositionClient) DeleteOneID(id int) *OrganizationPositionDeleteOne {
	builder := c.Delete().Where(organizationposition.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrganizationPositionDeleteOne{builder}
}

// Query returns a query builder for OrganizationPosition.
func (c *OrganizationPositionClient) Query() *OrganizationPositionQuery {
	return &OrganizationPositionQuery{
		config: c.config,
	}
}

// Get returns a OrganizationPosition entity by its id.
func (c *OrganizationPositionClient) Get(ctx context.Context, id int) (*OrganizationPosition, error) {
	return c.Query().Where(organizationposition.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrganizationPositionClient) GetX(ctx context.Context, id int) *OrganizationPosition {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDevices queries the devices edge of a OrganizationPosition.
func (c *OrganizationPositionClient) QueryDevices(op *OrganizationPosition) *DeviceQuery {
	query := &DeviceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := op.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organizationposition.Table, organizationposition.FieldID, id),
			sqlgraph.To(device.Table, device.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organizationposition.DevicesTable, organizationposition.DevicesColumn),
		)
		fromV = sqlgraph.Neighbors(op.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPersonCharges queries the person_charges edge of a OrganizationPosition.
func (c *OrganizationPositionClient) QueryPersonCharges(op *OrganizationPosition) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := op.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organizationposition.Table, organizationposition.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, organizationposition.PersonChargesTable, organizationposition.PersonChargesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(op.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrganizationTree queries the organization_tree edge of a OrganizationPosition.
func (c *OrganizationPositionClient) QueryOrganizationTree(op *OrganizationPosition) *OrganizationTreeQuery {
	query := &OrganizationTreeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := op.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organizationposition.Table, organizationposition.FieldID, id),
			sqlgraph.To(organizationtree.Table, organizationtree.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, organizationposition.OrganizationTreeTable, organizationposition.OrganizationTreeColumn),
		)
		fromV = sqlgraph.Neighbors(op.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrganizationPositionClient) Hooks() []Hook {
	return c.hooks.OrganizationPosition
}

// OrganizationTreeClient is a client for the OrganizationTree schema.
type OrganizationTreeClient struct {
	config
}

// NewOrganizationTreeClient returns a client for the OrganizationTree from the given config.
func NewOrganizationTreeClient(c config) *OrganizationTreeClient {
	return &OrganizationTreeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `organizationtree.Hooks(f(g(h())))`.
func (c *OrganizationTreeClient) Use(hooks ...Hook) {
	c.hooks.OrganizationTree = append(c.hooks.OrganizationTree, hooks...)
}

// Create returns a builder for creating a OrganizationTree entity.
func (c *OrganizationTreeClient) Create() *OrganizationTreeCreate {
	mutation := newOrganizationTreeMutation(c.config, OpCreate)
	return &OrganizationTreeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrganizationTree entities.
func (c *OrganizationTreeClient) CreateBulk(builders ...*OrganizationTreeCreate) *OrganizationTreeCreateBulk {
	return &OrganizationTreeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrganizationTree.
func (c *OrganizationTreeClient) Update() *OrganizationTreeUpdate {
	mutation := newOrganizationTreeMutation(c.config, OpUpdate)
	return &OrganizationTreeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrganizationTreeClient) UpdateOne(ot *OrganizationTree) *OrganizationTreeUpdateOne {
	mutation := newOrganizationTreeMutation(c.config, OpUpdateOne, withOrganizationTree(ot))
	return &OrganizationTreeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrganizationTreeClient) UpdateOneID(id int) *OrganizationTreeUpdateOne {
	mutation := newOrganizationTreeMutation(c.config, OpUpdateOne, withOrganizationTreeID(id))
	return &OrganizationTreeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrganizationTree.
func (c *OrganizationTreeClient) Delete() *OrganizationTreeDelete {
	mutation := newOrganizationTreeMutation(c.config, OpDelete)
	return &OrganizationTreeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrganizationTreeClient) DeleteOne(ot *OrganizationTree) *OrganizationTreeDeleteOne {
	return c.DeleteOneID(ot.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *OrganizationTreeClient) DeleteOneID(id int) *OrganizationTreeDeleteOne {
	builder := c.Delete().Where(organizationtree.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrganizationTreeDeleteOne{builder}
}

// Query returns a query builder for OrganizationTree.
func (c *OrganizationTreeClient) Query() *OrganizationTreeQuery {
	return &OrganizationTreeQuery{
		config: c.config,
	}
}

// Get returns a OrganizationTree entity by its id.
func (c *OrganizationTreeClient) Get(ctx context.Context, id int) (*OrganizationTree, error) {
	return c.Query().Where(organizationtree.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrganizationTreeClient) GetX(ctx context.Context, id int) *OrganizationTree {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrganizationPositions queries the organization_positions edge of a OrganizationTree.
func (c *OrganizationTreeClient) QueryOrganizationPositions(ot *OrganizationTree) *OrganizationPositionQuery {
	query := &OrganizationPositionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ot.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organizationtree.Table, organizationtree.FieldID, id),
			sqlgraph.To(organizationposition.Table, organizationposition.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organizationtree.OrganizationPositionsTable, organizationtree.OrganizationPositionsColumn),
		)
		fromV = sqlgraph.Neighbors(ot.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrganizationTreeClient) Hooks() []Hook {
	return c.hooks.OrganizationTree
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGroups queries the groups edge of a User.
func (c *UserClient) QueryGroups(u *User) *GroupQuery {
	query := &GroupQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, user.GroupsTable, user.GroupsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAdmins queries the admins edge of a User.
func (c *UserClient) QueryAdmins(u *User) *GroupQuery {
	query := &GroupQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, user.AdminsTable, user.AdminsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPersonCharges queries the person_charges edge of a User.
func (c *UserClient) QueryPersonCharges(u *User) *OrganizationPositionQuery {
	query := &OrganizationPositionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(organizationposition.Table, organizationposition.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, user.PersonChargesTable, user.PersonChargesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}
